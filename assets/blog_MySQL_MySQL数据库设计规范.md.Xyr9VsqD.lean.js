import{_ as r,o as i,c as f,f as n,a as t,g as u,w as d,a6 as s,L}from"./chunks/framework.BkI9ovSD.js";const E=JSON.parse('{"title":"MySQL数据库设计规范","description":"","frontmatter":{"title":"MySQL数据库设计规范","date":"2023-04-18T00:00:00.000Z","tags":["MySQL"],"categories":["MySQL"]},"headers":[],"relativePath":"blog/MySQL/MySQL数据库设计规范.md","filePath":"blog/MySQL/MySQL数据库设计规范.md","lastUpdated":1746603570000}'),m={name:"blog/MySQL/MySQL数据库设计规范.md"};function b(x,l,S,p,N,y){const o=L("font");return i(),f("div",{"data-pagefind-body":!0},[l[206]||(l[206]=n("h1",{id:"mysql数据库设计规范",tabindex:"-1"},[t("MySQL数据库设计规范 "),n("a",{class:"header-anchor",href:"#mysql数据库设计规范","aria-label":'Permalink to "MySQL数据库设计规范"'},"​")],-1)),l[207]||(l[207]=n("h2",{id:"建表规约",tabindex:"-1"},[t("建表规约 "),n("a",{class:"header-anchor",href:"#建表规约","aria-label":'Permalink to "建表规约"'},"​")],-1)),n("ol",null,[n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[0]||(l[0]=[t("【强制】")])),_:1}),l[4]||(l[4]=t("表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是，0 表示否）。 ")),u(o,{color:"#977c00"},{default:d(()=>l[1]||(l[1]=[t("注意")])),_:1}),l[5]||(l[5]=t("：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在设置从 is_xxx 到 Xxx 的映射关系。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的命名方式是为了明确其取值含义与取值范围。 ")),u(o,{color:"#977c00"},{default:d(()=>l[2]||(l[2]=[t("说明")])),_:1}),l[6]||(l[6]=t("：任何字段如果为非负数，必须是 unsigned。 ")),u(o,{color:"#129f63"},{default:d(()=>l[3]||(l[3]=[t("正例")])),_:1}),l[7]||(l[7]=t("：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[8]||(l[8]=[t("【强制】")])),_:1}),l[12]||(l[12]=t("表名、字段名必须使用小写字母或数字，禁止出现数字开头禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。 ")),u(o,{color:"#977c00"},{default:d(()=>l[9]||(l[9]=[t("说明")])),_:1}),l[13]||(l[13]=t("：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。 ")),u(o,{color:"#129f63"},{default:d(()=>l[10]||(l[10]=[t("正例")])),_:1}),l[14]||(l[14]=t("：aliyun_admin，rdc_config，level3_name ")),u(o,{color:"#ff4600"},{default:d(()=>l[11]||(l[11]=[t("反例")])),_:1}),l[15]||(l[15]=t("：AliyunAdmin，rdcConfig，level_3_name "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[16]||(l[16]=[t("【强制】")])),_:1}),l[18]||(l[18]=t("表名不使用复数名词。 ")),u(o,{color:"#977c00"},{default:d(()=>l[17]||(l[17]=[t("说明")])),_:1}),l[19]||(l[19]=t("：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[20]||(l[20]=[t("【强制】")])),_:1}),l[21]||(l[21]=t("禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[22]||(l[22]=[t("【强制】")])),_:1}),l[24]||(l[24]=t("主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。")),u(o,{color:"#977c00"},{default:d(()=>l[23]||(l[23]=[t("说明")])),_:1}),l[25]||(l[25]=t("：pk_即 primary key；uk_即 unique key；idx_即 index 的简称。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[26]||(l[26]=[t("【强制】")])),_:1}),l[28]||(l[28]=t("小数类型为 decimal，禁止使用 float 和 double。 ")),u(o,{color:"#977c00"},{default:d(()=>l[27]||(l[27]=[t("说明")])),_:1}),l[29]||(l[29]=t("：在存储的时候，float 和 double 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数并分开存储。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[30]||(l[30]=[t("【强制】")])),_:1}),l[31]||(l[31]=t("如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[32]||(l[32]=[t("【强制】")])),_:1}),l[33]||(l[33]=t("varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引率。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[34]||(l[34]=[t("【强制】")])),_:1}),l[36]||(l[36]=t("表必备三字段：id，create_time，update_time。 ")),u(o,{color:"#977c00"},{default:d(()=>l[35]||(l[35]=[t("说明")])),_:1}),l[37]||(l[37]=t("：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。create_time，update_time 的类型均为 datetime 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[38]||(l[38]=[t("【强制】")])),_:1}),l[40]||(l[40]=t("在数据库中不能使用物理删除操作，要使用逻辑删除。 ")),u(o,{color:"#977c00"},{default:d(()=>l[39]||(l[39]=[t("说明")])),_:1}),l[41]||(l[41]=t("：逻辑删除在数据删除后可以追溯到行为操作。不过会使得一些情况下的唯一主键变得不唯一，需要根据情况来酌情解决。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[42]||(l[42]=[t("【推荐】")])),_:1}),l[44]||(l[44]=t("表的命名最好是遵循“业务名称_表的作用”。 ")),u(o,{color:"#129f63"},{default:d(()=>l[43]||(l[43]=[t("正例")])),_:1}),l[45]||(l[45]=t("：alipay_task / force_project / trade_config / tes_question "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[46]||(l[46]=[t("【推荐】")])),_:1}),l[47]||(l[47]=t("库名与应用名称尽量一致。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[48]||(l[48]=[t("【推荐】")])),_:1}),l[49]||(l[49]=t("如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。"))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[50]||(l[50]=[t("【推荐】")])),_:1}),l[52]||(l[52]=t("字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循： ")),l[53]||(l[53]=n("ol",null,[n("li",null,"不是频繁修改的字段。"),n("li",null,"不是唯一索引的字段。"),n("li",null,"不是 varchar 超长字段，更不能是 text 字段。")],-1)),u(o,{color:"#129f63"},{default:d(()=>l[51]||(l[51]=[t("正例")])),_:1}),l[54]||(l[54]=t("：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。"))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[55]||(l[55]=[t("【推荐】")])),_:1}),l[57]||(l[57]=t("单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 ")),u(o,{color:"#977c00"},{default:d(()=>l[56]||(l[56]=[t("说明")])),_:1}),l[58]||(l[58]=t("：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 "))]),n("li",null,[u(o,{color:"#76923c"},{default:d(()=>l[59]||(l[59]=[t("【参考】")])),_:1}),l[61]||(l[61]=t("合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。 ")),u(o,{color:"#129f63"},{default:d(()=>l[60]||(l[60]=[t("正例")])),_:1}),l[62]||(l[62]=s('：无符号值可以避免误存负数，且扩大了表示范围： <table tabindex="0"><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150 岁之内</td><td>tinyint unsigned</td><td>1</td><td>无符号值：0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>smallint unsigned</td><td>2</td><td>无符号值：0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>int unsigned</td><td>4</td><td>无符号值：0 到约 43 亿</td></tr><tr><td>太阳</td><td>约 50 亿年</td><td>bigint unsigned</td><td>8</td><td>无符号值：0 到约 10 的 19 次方</td></tr></tbody></table>',2))])]),l[208]||(l[208]=n("h2",{id:"索引规约",tabindex:"-1"},[t("索引规约 "),n("a",{class:"header-anchor",href:"#索引规约","aria-label":'Permalink to "索引规约"'},"​")],-1)),n("ol",null,[n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[63]||(l[63]=[t("【强制】")])),_:1}),l[65]||(l[65]=t("业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。 ")),u(o,{color:"#977c00"},{default:d(()=>l[64]||(l[64]=[t("说明")])),_:1}),l[66]||(l[66]=t("：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[67]||(l[67]=[t("【强制】")])),_:1}),l[69]||(l[69]=t("超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。 ")),u(o,{color:"#977c00"},{default:d(()=>l[68]||(l[68]=[t("说明")])),_:1}),l[70]||(l[70]=t("：即使双表 join 也要注意表索引、SQL 性能。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[71]||(l[71]=[t("【强制】")])),_:1}),l[73]||(l[73]=t("在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。 ")),u(o,{color:"#977c00"},{default:d(()=>l[72]||(l[72]=[t("说明")])),_:1}),l[74]||(l[74]=t("：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名，索引长度)) / count(*) 的区分度来确定。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[75]||(l[75]=[t("【强制】")])),_:1}),l[77]||(l[77]=t("页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。 ")),u(o,{color:"#977c00"},{default:d(()=>l[76]||(l[76]=[t("说明")])),_:1}),l[78]||(l[78]=t("：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[79]||(l[79]=[t("【推荐】")])),_:1}),l[82]||(l[82]=t("如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部 分，并且放在索引组合顺序的最后，避免出现 filesort 的情况，影响查询性能。 ")),u(o,{color:"#129f63"},{default:d(()=>l[80]||(l[80]=[t("正例")])),_:1}),l[83]||(l[83]=t("：where a = ? and b = ? order by c；索引：a_b_c ")),u(o,{color:"#ff4600"},{default:d(()=>l[81]||(l[81]=[t("反例")])),_:1}),l[84]||(l[84]=t("：索引如果存在范围查询，那么索引有序性无法利用，如：WHERE a > 10 ORDER BY b；索引 a_b 无法排序。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[85]||(l[85]=[t("【推荐】")])),_:1}),l[88]||(l[88]=t("利用覆盖索引来进行查询操作，避免回表。 ")),u(o,{color:"#977c00"},{default:d(()=>l[86]||(l[86]=[t("说明")])),_:1}),l[89]||(l[89]=t("：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起 到覆盖索引的作用。 ")),u(o,{color:"#129f63"},{default:d(()=>l[87]||(l[87]=[t("正例")])),_:1}),l[90]||(l[90]=t("：能够建立索引的种类分为主键索引、唯一索引、普通索引三种，而覆盖索引只是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[91]||(l[91]=[t("【推荐】")])),_:1}),l[94]||(l[94]=t("利用延迟关联或者子查询优化超多分页场景。 ")),u(o,{color:"#977c00"},{default:d(()=>l[92]||(l[92]=[t("说明")])),_:1}),l[95]||(l[95]=t("：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大 的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。 ")),u(o,{color:"#129f63"},{default:d(()=>l[93]||(l[93]=[t("正例")])),_:1}),l[96]||(l[96]=t("：先快速定位需要获取的 id 段，然后再关联： SELECT t1.* FROM 表 1 as t1 , (select id from 表 1 where 条件 LIMIT 100000 , 20) as t2 where t1.id = t2.id "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[97]||(l[97]=[t("【推荐】")])),_:1}),l[100]||(l[100]=t("SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 const 最好。")),u(o,{color:"#977c00"},{default:d(()=>l[98]||(l[98]=[t("说明")])),_:1}),l[101]||(l[101]=t("： ")),l[102]||(l[102]=n("ol",null,[n("li",null,"consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。"),n("li",null,"ref 指的是使用普通的索引（normal index）"),n("li",null,"range 对索引进行范围检索。")],-1)),u(o,{color:"#ff4600"},{default:d(()=>l[99]||(l[99]=[t("反例")])),_:1}),l[103]||(l[103]=t("：explain 表的结果，type = index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全 表扫描是小巫见大巫。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[104]||(l[104]=[t("【推荐】")])),_:1}),l[107]||(l[107]=t("建组合索引的时候，区分度最高的在最左边。 ")),u(o,{color:"#129f63"},{default:d(()=>l[105]||(l[105]=[t("正例")])),_:1}),l[108]||(l[108]=t("：如果 where a = ? and b = ?，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。 ")),u(o,{color:"#977c00"},{default:d(()=>l[106]||(l[106]=[t("说明")])),_:1}),l[109]||(l[109]=t("：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where c > ? and d = ? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即建立组合索引 idx_d_c。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[110]||(l[110]=[t("【推荐】")])),_:1}),l[111]||(l[111]=t("防止因字段类型不同造成的隐式转换，导致索引失效。 "))]),n("li",null,[u(o,{color:"#76923c"},{default:d(()=>l[112]||(l[112]=[t("【参考】")])),_:1}),l[113]||(l[113]=t("创建索引时避免有如下极端误解：")),l[114]||(l[114]=n("ol",null,[n("li",null,"索引宁滥勿缺。认为一个查询就需要建一个索引。"),n("li",null,"吝啬索引的创建。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。"),n("li",null,"抵制唯一索引。认为唯一索引一律需要在应用层通过“先查后插”方式解决。")],-1))])]),l[209]||(l[209]=n("h2",{id:"sql-语句",tabindex:"-1"},[t("SQL 语句 "),n("a",{class:"header-anchor",href:"#sql-语句","aria-label":'Permalink to "SQL 语句"'},"​")],-1)),n("ol",null,[n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[115]||(l[115]=[t("【强制】")])),_:1}),l[117]||(l[117]=t("不要使用 count(列名) 或 count(常量) 来替代 count(")),l[118]||(l[118]=n("em",null,")，count(",-1)),l[119]||(l[119]=t(") 是 SQL92 定义的标准统计行 数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。")),u(o,{color:"#977c00"},{default:d(()=>l[116]||(l[116]=[t("说明")])),_:1}),l[120]||(l[120]=t("：count(*) 会统计值为 NULL 的行，而 count(列名) 不会统计此列为 NULL 值的行。"))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[121]||(l[121]=[t("【强制】")])),_:1}),l[122]||(l[122]=t("count(distinct col) 计算该列除 NULL 之外的不重复行数，注意count(distinct col1 , col2) 如 果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[123]||(l[123]=[t("【强制】")])),_:1}),l[126]||(l[126]=t("当某一列的值全是 NULL 时，count(col) 的返回结果为 0；但 sum(col) 的返回结果为 NULL，因 此使用 sum() 时需")),u(o,{color:"#977c00"},{default:d(()=>l[124]||(l[124]=[t("注意")])),_:1}),l[127]||(l[127]=t(" NPE 问题。 ")),u(o,{color:"#129f63"},{default:d(()=>l[125]||(l[125]=[t("正例")])),_:1}),l[128]||(l[128]=t("：可以使用如下方式来避免 sum 的 NPE 问题：SELECT IFNULL(SUM(column) , 0) FROM table; "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[129]||(l[129]=[t("【强制】")])),_:1}),l[132]||(l[132]=t("使用 ISNULL() 来判断是否为 NULL 值。 ")),u(o,{color:"#977c00"},{default:d(()=>l[130]||(l[130]=[t("说明")])),_:1}),l[133]||(l[133]=t("：NULL 与任何值的直接比较都为 NULL。 ")),l[134]||(l[134]=n("ol",null,[n("li",null,"NULL<>NULL 的返回结果是 NULL，而不是 false。"),n("li",null,"NULL=NULL 的返回结果是 NULL，而不是 true。"),n("li",null,"NULL<>1 的返回结果是 NULL，而不是 true。")],-1)),u(o,{color:"#ff4600"},{default:d(()=>l[131]||(l[131]=[t("反例")])),_:1}),l[135]||(l[135]=t("：在 SQL 语句中，如果在 null 前换行，影响可读性。 select * from table where column1 is null and column3 is not null；而 ISNULL(column) 是一个整体，简洁易懂。 从性能数据上分析，ISNULL(column) 执行效率更快一些。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[136]||(l[136]=[t("【强制】")])),_:1}),l[137]||(l[137]=t("代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[138]||(l[138]=[t("【强制】")])),_:1}),l[140]||(l[140]=t("不得使用外键与级联，一切外键概念必须在应用层解决。")),u(o,{color:"#977c00"},{default:d(()=>l[139]||(l[139]=[t("说明")])),_:1}),l[141]||(l[141]=t("：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、 高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[142]||(l[142]=[t("【强制】")])),_:1}),l[143]||(l[143]=t("禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[144]||(l[144]=[t("【强制】")])),_:1}),l[145]||(l[145]=t("数据订正（特别是删除或修改记录操作）时，要先 select，避免出现误删除的情况，确认无误才 能执行更新语句。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[146]||(l[146]=[t("【强制】")])),_:1}),l[150]||(l[150]=t("对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进 行限定。")),u(o,{color:"#977c00"},{default:d(()=>l[147]||(l[147]=[t("说明")])),_:1}),l[151]||(l[151]=t("：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个 表中存在时，就会抛异常。")),u(o,{color:"#129f63"},{default:d(()=>l[148]||(l[148]=[t("正例")])),_:1}),l[152]||(l[152]=t("：select t1.name from first_table as t1 , second_table as t2 where t1.id = t2.id; ")),u(o,{color:"#ff4600"},{default:d(()=>l[149]||(l[149]=[t("反例")])),_:1}),l[153]||(l[153]=t("：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在某个表中增加 一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常： Column 'name' infield list is ambiguous。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[154]||(l[154]=[t("【推荐】")])),_:1}),l[157]||(l[157]=t("SQL 语句中表的别名前加 as，并且以 t1、t2、t3、...的顺序依次命名。 ")),u(o,{color:"#977c00"},{default:d(()=>l[155]||(l[155]=[t("说明")])),_:1}),l[158]||(l[158]=t("： ")),l[159]||(l[159]=n("ol",null,[n("li",null,"别名可以是表的简称，或者是依照表在 SQL 语句中出现的顺序，以 t1、t2、t3 的方式命名。"),n("li",null,"别名前加 as 使别名更容易识别。")],-1)),u(o,{color:"#129f63"},{default:d(()=>l[156]||(l[156]=[t("正例")])),_:1}),l[160]||(l[160]=t("：select t1.name from first_table as t1 , second_table as t2 where t1.id = t2.id; "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[161]||(l[161]=[t("【推荐】")])),_:1}),l[162]||(l[162]=t("in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。 "))]),n("li",null,[u(o,{color:"#76923c"},{default:d(()=>l[163]||(l[163]=[t("【参考】")])),_:1}),l[165]||(l[165]=t("因国际化需要，所有的字符存储与表示，均采用 utf8 字符集，那么字符计数方法需要注意。 ")),u(o,{color:"#977c00"},{default:d(()=>l[164]||(l[164]=[t("说明")])),_:1}),l[166]||(l[166]=t("：")),l[167]||(l[167]=n("ul",null,[n("li",null,'SELECT LENGTH("轻松工作")；--返回为 12'),n("li",null,'SELECT CHARACTER_LENGTH("轻松工作")；--返回为 4'),n("li",null,"如果需要存储表情，那么选择 utf8mb4 来进行存储，注意它与 utf8 编码的区别。")],-1))]),n("li",null,[u(o,{color:"#76923c"},{default:d(()=>l[168]||(l[168]=[t("【参考】")])),_:1}),l[170]||(l[170]=t("TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。 ")),u(o,{color:"#977c00"},{default:d(()=>l[169]||(l[169]=[t("说明")])),_:1}),l[171]||(l[171]=t("：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。 "))])]),l[210]||(l[210]=n("h2",{id:"orm-映射",tabindex:"-1"},[t("ORM 映射 "),n("a",{class:"header-anchor",href:"#orm-映射","aria-label":'Permalink to "ORM 映射"'},"​")],-1)),n("ol",null,[n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[172]||(l[172]=[t("【强制】")])),_:1}),l[174]||(l[174]=t("在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。 ")),u(o,{color:"#977c00"},{default:d(()=>l[173]||(l[173]=[t("说明")])),_:1}),l[175]||(l[175]=t("： ")),l[176]||(l[176]=n("ol",null,[n("li",null,"增加查询分析器解析成本。"),n("li",null,"增减字段容易与 resultMap 配置不一致。"),n("li",null,"无用字段增加网络消耗，尤其是 text 类型的字段。")],-1))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[177]||(l[177]=[t("【强制】")])),_:1}),l[179]||(l[179]=t("POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属 性之间的映射。 ")),u(o,{color:"#977c00"},{default:d(()=>l[178]||(l[178]=[t("说明")])),_:1}),l[180]||(l[180]=t("：参见定义 POJO 类以及数据库字段定义规定，在 sql.xml 增加映射，是必须的。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[181]||(l[181]=[t("【强制】")])),_:1}),l[183]||(l[183]=t("不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义 ；反过来，每一个表也必然有一个与之对应。 ")),u(o,{color:"#977c00"},{default:d(()=>l[182]||(l[182]=[t("说明")])),_:1}),l[184]||(l[184]=t("：配置映射关系，使字段与 DO 类解耦，方便维护。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[185]||(l[185]=[t("【强制】")])),_:1}),l[186]||(l[186]=t("sql.xml 配置参数使用：#{}，#param# 不要使用 ${} 此种方式容易出现 SQL 注入。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[187]||(l[187]=[t("【强制】")])),_:1}),l[190]||(l[190]=t("iBATIS 自带的 queryForList(String statementName，int start，int size) 不推荐使用。 ")),u(o,{color:"#977c00"},{default:d(()=>l[188]||(l[188]=[t("说明")])),_:1}),l[191]||(l[191]=t("：其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList 取 start，size 的子集合，线上因为这个原因曾经出现过 OOM。 ")),u(o,{color:"#129f63"},{default:d(()=>l[189]||(l[189]=[t("正例")])),_:1}),l[192]||(l[192]=t("： ")),l[193]||(l[193]=n("ul",null,[n("li",null,"Map map = new HashMap<>(16);"),n("li",null,'map.put("start", start);'),n("li",null,'map.put("size", size);')],-1))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[194]||(l[194]=[t("【强制】")])),_:1}),l[196]||(l[196]=t("不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。 ")),u(o,{color:"#ff4600"},{default:d(()=>l[195]||(l[195]=[t("反例")])),_:1}),l[197]||(l[197]=t("：某同学为避免写一个xxx，直接使用 Hashtable 来接收数据库返回结果，结果出现 日常是把 bigint 转成 Long 值，而线上由于数据库版本不一样，解析成 BigInteger，导致线上问题。 "))]),n("li",null,[u(o,{color:"#c00000"},{default:d(()=>l[198]||(l[198]=[t("【强制】")])),_:1}),l[199]||(l[199]=t("更新数据表记录时，必须同时更新记录对应的 update_time 字段值为当前时间。 "))]),n("li",null,[u(o,{color:"#ffc000"},{default:d(()=>l[200]||(l[200]=[t("【推荐】")])),_:1}),l[201]||(l[201]=t("不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1 = value1 , c2 = value2 , c3 = value3；这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。 "))]),n("li",null,[u(o,{color:"#76923c"},{default:d(()=>l[202]||(l[202]=[t("【参考】")])),_:1}),l[203]||(l[203]=t("@Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各 方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。 "))]),n("li",null,[u(o,{color:"#76923c"},{default:d(()=>l[204]||(l[204]=[t("【参考】")])),_:1}),l[205]||(l[205]=t("中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条 件；表示不为空且不为 null 时执行；表示不为 null 值时执行"))])])])}const Q=r(m,[["render",b]]);export{E as __pageData,Q as default};
