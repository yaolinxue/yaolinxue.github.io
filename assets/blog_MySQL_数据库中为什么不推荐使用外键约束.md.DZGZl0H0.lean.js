import{_ as e,o as t,c as r,a6 as o}from"./chunks/framework.BkI9ovSD.js";const c=JSON.parse('{"title":"数据库中为什么不推荐使用外键约束","description":"","frontmatter":{"title":"数据库中为什么不推荐使用外键约束","date":"2020-06-2","tags":["MySQL","Notes"],"categories":["MySQL"]},"headers":[],"relativePath":"blog/MySQL/数据库中为什么不推荐使用外键约束.md","filePath":"blog/MySQL/数据库中为什么不推荐使用外键约束.md","lastUpdated":1746603753000}'),l={name:"blog/MySQL/数据库中为什么不推荐使用外键约束.md"};function i(d,a,s,n,p,h){return t(),r("div",{"data-pagefind-body":!0},a[0]||(a[0]=[o('<h1 id="数据库中为什么不推荐使用外键约束" tabindex="-1">数据库中为什么不推荐使用外键约束 <a class="header-anchor" href="#数据库中为什么不推荐使用外键约束" aria-label="Permalink to &quot;数据库中为什么不推荐使用外键约束&quot;">​</a></h1><h2 id="一、引言" tabindex="-1">一、引言 <a class="header-anchor" href="#一、引言" aria-label="Permalink to &quot;一、引言&quot;">​</a></h2><p>其实这个话题是老生常谈，很多人在工作中确实也不会使用外键。包括在阿里的JAVA规范中也有下面这一条：</p><p><strong>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</strong></p><p>但是呢，询问他们原因，大多是这么回答的：</p><p><strong>每次做DELETE 或者UPDATE都必须考虑外键约束，会导致开发的时候很痛苦，测试数据极为不方便。</strong></p><p>坦白说，这么说也是对的。但是呢，不够全面，所以开一文来详细说明。</p><h2 id="二、正文" tabindex="-1">二、正文 <a class="header-anchor" href="#二、正文" aria-label="Permalink to &quot;二、正文&quot;">​</a></h2><p>首先我们明确一点，外键约束是一种约束，这个约束的存在，会保证表间数据的关系“始终完整”。因此，外键约束的存在，并非全然没有优点。</p><p>比如使用外键，可以</p><ul><li>保证数据的完整性和一致性</li><li>级联操作方便</li><li>将数据完整性判断托付给了数据库完成，减少了程序的代码量</li></ul><p>然而，鱼和熊掌不可兼得。外键是能够保证数据的完整性，但是会给系统带来很多缺陷。正是因为这些缺陷，才导致我们不推荐使用外键，具体如下：</p><h3 id="_1、性能问题" tabindex="-1">1、性能问题 <a class="header-anchor" href="#_1、性能问题" aria-label="Permalink to &quot;1、性能问题&quot;">​</a></h3><p>假设一张表名为 user_tb。那么这张表里有两个外键字段，指向两张表。那么，每次往user_tb表里插入数据，就必须往两个外键对应的表里查询是否有对应数据。如果交由程序控制，这种查询过程就可以控制在我们手里，可以省略一些不必要的查询过程。但是如果由数据库控制，则是必须要去这两张表里判断。</p><h3 id="_2、并发问题" tabindex="-1">2、并发问题 <a class="header-anchor" href="#_2、并发问题" aria-label="Permalink to &quot;2、并发问题&quot;">​</a></h3><p>在使用外键的情况下，每次修改数据都需要去另外一个表检查数据，需要获取额外的锁。若是在高并发大流量事务场景，使用外键更容易造成死锁。</p><h3 id="_3、扩展性问题" tabindex="-1">3、扩展性问题 <a class="header-anchor" href="#_3、扩展性问题" aria-label="Permalink to &quot;3、扩展性问题&quot;">​</a></h3><p>这里主要是分为两点：</p><ul><li>做平台迁移方便，比如你从 <code>Mysql</code>迁移到 <code>Oracle</code>，像触发器、外键这种东西，都可以利用框架本身的特性来实现，而不用依赖于数据库本身的特性，做迁移更加方便。</li><li>分库分表方便，在水平拆分和分库的情况下，外键是无法生效的。将数据间关系的维护，放入应用程序中，为将来的分库分表省去很多的麻烦。</li></ul><h3 id="_4、技术问题" tabindex="-1">4、技术问题 <a class="header-anchor" href="#_4、技术问题" aria-label="Permalink to &quot;4、技术问题&quot;">​</a></h3><p>使用外键，其实将应用程序应该执行的判断逻辑转移到了数据库上。那么这意味着一点，数据库的性能开销变大了，那么这就对DBA的要求就更高了。很多中小型公司由于资金问题，并没有聘用专业的DBA，因此他们会选择不用外键，降低数据库的消耗。</p><p>相反的，如果该约束逻辑在应用程序中，发现应用服务器性能不够，可以加机器，做水平扩展。如果是在数据库服务器上，数据库服务器会成为性能瓶颈，做水平扩展比较困难。</p>',22)]))}const u=e(l,[["render",i]]);export{c as __pageData,u as default};
