import{_ as t,a as p}from"./chunks/640-1691727654013-82.C_d9zXGY.js";import{_ as r,o,c as a,a6 as n}from"./chunks/framework.BkI9ovSD.js";const g="/assets/640-1691736278052-87.Ch0tIIBj.gif",i="/assets/640-1691735818318-2.ceJrQqMi.png",e="/assets/640-1691735818318-3.YJNwMYcv.gif",c="/assets/640-1691735818318-4.B-hfdHvy.gif",l="/assets/640-1691735818318-5.CAL-0SO1.gif",m="/assets/640-1691735818318-6.NQnzWfbj.gif",A="/assets/640-1691735818318-7.BSV0FkqQ.gif",_="/assets/640-1691735818318-8.B-vElnI-.gif",h="/assets/640-1691735818318-9.CLEYuRRU.gif",B="/assets/640-1691735818319-10.gKix-0sy.gif",d="/assets/640-1691735818319-11.C7UrwaEG.gif",f="/assets/640-1691735818319-12.DaOGWqNg.png",C="/assets/640-1691736198703-75.BuuqbO0L.gif",u="/assets/640-1691736217766-78.DhLiMHNA.gif",P="/assets/640-1691736220720-81.DlILFuvL.gif",q="/assets/640-1691736238499-84.CkLOaOph.gif",b="/assets/640-1691735818319-17.B8bjZ_m2.gif",k="/assets/640-1691735818319-18.CAIR4FAM.gif",T="/assets/640-1691735818319-19.Be_KzFQz.gif",K="/assets/640-1691735818319-20.BsqqrcWT.gif",w="/assets/640-1691735818319-21.B6VWAfvf.gif",x="/assets/640-1691735818320-22.vYUfB7M-.png",N="/assets/640-1691735818320-23.DW2LC9vb.jpeg",F=JSON.parse('{"title":"一文详解TCP","description":"","frontmatter":{"title":"一文详解TCP","date":"2023-08-11T00:00:00.000Z","tags":["TCP","传输层"],"categories":["计算机网络"]},"headers":[],"relativePath":"blog/ComputerNetworks/一文详解TCP.md","filePath":"blog/ComputerNetworks/一文详解TCP.md","lastUpdated":1746603753000}'),S={name:"blog/ComputerNetworks/一文详解TCP.md"};function v(D,s,I,L,O,M){return o(),a("div",{"data-pagefind-body":!0},s[0]||(s[0]=[n('<h1 id="一文详解tcp" tabindex="-1">一文详解TCP <a class="header-anchor" href="#一文详解tcp" aria-label="Permalink to &quot;一文详解TCP&quot;">​</a></h1><h2 id="第四层-传输层" tabindex="-1">第四层（传输层） <a class="header-anchor" href="#第四层-传输层" aria-label="Permalink to &quot;第四层（传输层）&quot;">​</a></h2><p>假设你有一台电脑 A，一开始它不与任何其他电脑相连接。</p><p><img src="'+t+'" alt="图片"></p><p>经过上文中的一番折腾，只要你知道另一位伙伴 B 的 IP 地址，且你们之间的网络是通的，无论多远，你都可以将一个数据包发送给你的伙伴 B</p><p><img src="'+p+'" alt="图片"></p><p>这就是物理层、数据链路层、网络层这三层所做的事情。</p><p>站在第四层的你，就可以直接利用下三层所做的铺垫，随心所欲地发送数据，而不必担心找不到对方了。</p><p><img src="'+g+'" alt="图片"></p><p>虽然你此时还什么都没干，但你还是给自己这一层起了个响亮的名字，叫做 <strong>传输层</strong>。</p><p>你本以为自己所在的第四层万事大吉，啥事没有，但很快问题就接踵而至。</p><h2 id="问题来了" tabindex="-1">问题来了 <a class="header-anchor" href="#问题来了" aria-label="Permalink to &quot;问题来了&quot;">​</a></h2><p>前三层协议只能把数据包从一个主机搬到另外一台主机，但是，到了目的地以后，数据包具体交给哪个<strong>程序</strong>（进程）呢？</p><p>所以，你需要把通信的进程区分开来，于是就给每个进程分配一个数字编号，你给它起了一个响亮的名字：<strong>端口号</strong>。</p><p>然后你在要发送的数据包上，增加了传输层的头部，<strong>源端口号</strong>与<strong>目标端口号</strong>。</p><p><img src="'+i+'" alt="图片"></p><p>OK，这样你将原本主机到主机的通信，升级为了 <strong>进程和进程之间的通信</strong>。</p><p>你没有意识到，你不知不觉实现了 <strong>UDP 协议</strong>！</p><p>（当然 UDP 协议中不光有源端口和目标端口，还有数据包长度和校验值，我们暂且略过）</p><p>就这样，你用 UDP 协议无忧无虑地同 B 进行着通信，一直没发生什么问题。</p><p><img src="'+e+'" alt="图片"></p><p>但很快，你发现事情变得非常复杂......</p><h2 id="丢包问题" tabindex="-1">丢包问题 <a class="header-anchor" href="#丢包问题" aria-label="Permalink to &quot;丢包问题&quot;">​</a></h2><p>由于网络的不可靠，数据包可能在半路丢失，而 A 和 B 却无法察觉。</p><p><img src="'+c+'" alt="图片"></p><p>对于丢包问题，只要解决两个事就好了。</p><p><strong>第一个，A 怎么知道包丢了？</strong></p><p>答案：让 B 告诉 A</p><p><strong>第二个，丢了的包怎么办？</strong></p><p>答案：重传</p><p>于是你设计了如下方案，A 每发一个包，都必须收到来自 B 的<strong>确认</strong>（ACK），再发下一个，否则在一定时间内没有收到确认，就<strong>重传</strong>这个包。</p><p><img src="'+l+'" alt="图片"></p><p>你管它叫 <strong>停止等待协议</strong>。只要按照这个协议来，虽然 A 无法保证 B 一定能收到包，但 A 能够确认 B 是否收到了包，收不到就重试，尽最大努力让这个通信过程变得可靠，于是你们现在的通信过程又有了一个新的特征：<strong>可靠交付</strong>。</p><h2 id="效率问题" tabindex="-1">效率问题 <a class="header-anchor" href="#效率问题" aria-label="Permalink to &quot;效率问题&quot;">​</a></h2><p>停止等待虽然能解决问题，但是效率太低了，A 原本可以在发完第一个数据包之后立刻开始发第二个数据包，但由于停止等待协议，A 必须等数据包到达了 B ，且 B 的 ACK 包又回到了 A，才可以继续发第二个数据包，这效率慢得可不是一点两点。</p><p>于是你对这个过程进行了改进，采用 <strong>流水线</strong> 的方式，不再傻傻地等。</p><p><img src="'+m+'" alt="图片"></p><h2 id="顺序问题" tabindex="-1">顺序问题 <a class="header-anchor" href="#顺序问题" aria-label="Permalink to &quot;顺序问题&quot;">​</a></h2><p>但是网路是复杂的、不可靠的。</p><p>有的时候 A 发出去的数据包，分别走了不同的路由到达 B，可能无法保证和发送数据包时一样的顺序。</p><p><img src="'+A+'" alt="图片"></p><p>在流水线中有多个数据包和ACK包在<strong>乱序流动</strong>，他们之间对应关系就乱掉了。</p><p>难道还回到停止等待协议？A 每收到一个包的确认（ACK）再发下一个包，那就根本不存在顺序问题。应该有更好的办法！</p><p>A 在发送的数据包中增加一个<strong>序号</strong>（seq），同时 B 要在 ACK 包上增加一个<strong>确认号</strong>（ack），这样不但解决了停止等待协议的效率问题，也通过这样标序号的方式解决了顺序问题。</p><p><img src="'+_+'" alt="图片"></p><p>而 B 这个确认号意味深长：比如 B 发了一个确认号为 ack = 3，它不仅仅表示 A 发送的序号为 2 的包收到了，还表示 2 之前的数据包都收到了。这种方式叫<strong>累计确认</strong>或<strong>累计应答</strong>。</p><p><img src="'+h+'" alt="图片"></p><p>注意，实际上 ack 的号是收到的最后一个数据包的序号 seq + 1，也就是告诉对方下一个应该发的序号是多少。但图中为了便于理解，ack 就表示收到的那个序号，不必纠结。</p><h2 id="流量问题" tabindex="-1">流量问题 <a class="header-anchor" href="#流量问题" aria-label="Permalink to &quot;流量问题&quot;">​</a></h2><p>有的时候，A 发送数据包的速度太快，而 B 的接收能力不够，但 B 却没有告知 A 这个情况。</p><p><img src="'+B+'" alt="图片"></p><p>怎么解决呢？</p><p>很简单，B 告诉 A 自己的接收能力，A 根据 B 的接收能力，相应控制自己的 <strong>发送速率</strong>，就好了。</p><p>B 怎么告诉 A 呢？B 跟 A 说&quot;我很强&quot;这三个字么？那肯定不行，得有一个严谨的规范。</p><p>于是 B 决定，每次发送数据包给 A 时，顺带传过来一个值，叫 <strong>窗口大小</strong>（win)，这个值就表示 B 的 <strong>接收能力</strong>。同理，每次 A 给 B 发包时也带上自己的窗口大小，表示 A 的接收能力。</p><p><img src="'+d+'" alt="图片"></p><p>B 告诉了 A 自己的窗口大小值，A 怎么利用它去做 A 这边发包的流量控制呢？</p><p>很简单，假如 B 给 A 传过来的窗口大小 win = 5，那 A 根据这个值，把自己要发送的数据分成这么几类。</p><p><img src="'+f+'" alt="图片"></p><p>图片过于清晰，就不再文字解释了。</p><p>当 A 不断发送数据包时，<strong>已发送的最后一个序号</strong> 就往右移动，直到碰到了窗口的上边界，此时 A 就无法继续发包，达到了流量控制。</p><p><img src="'+C+'" alt="图片"></p><p>但是当 A 不断发包的同时，A 也会收到来自 B 的确认包，此时 <strong>整个窗口</strong> 会往右移动，因此上边界也往右移动，A 就能发更多的数据包了。</p><p><img src="'+u+'" alt="图片"></p><p>以上都是在窗口大小不变的情况下，而 B 在发给 A 的 ACK 包中，每一个都可以 <strong>重新设置</strong> 一个新的窗口大小，如果 A 收到了一个新的窗口大小值，A 会随之调整。</p><p>如果 A 收到了比原窗口值更大的窗口大小，比如 win = 6，则 A 会直接将窗口上边界向右移动 1 个单位。</p><p><img src="'+P+'" alt="图片"></p><p>如果 A 收到了比原窗口值小的窗口大小，比如 win = 4，则 A 暂时不会改变窗口大小，更不会将窗口上边界向左移动，而是等着 ACK 的到来，不断将左边界向右移动，直到窗口大小值收缩到新大小为止。</p><p><img src="'+q+'" alt="图片"></p><p>OK，终于将流量控制问题解决得差不多了，你看着上面一个个小动图，给这个窗口起了一个更生动的名字，<strong>滑动窗口</strong>。</p><h2 id="拥塞问题" tabindex="-1">拥塞问题 <a class="header-anchor" href="#拥塞问题" aria-label="Permalink to &quot;拥塞问题&quot;">​</a></h2><p>但有的时候，不是 B 的接受能力不够，而是网络不太好，造成了 <strong>网络拥塞</strong>。</p><p><img src="'+b+'" alt="图片"></p><p>拥塞控制与流量控制有些像，但流量控制是受 B 的接收能力影响，而拥塞控制是受 <strong>网络环境</strong> 的影响。</p><p>拥塞控制的解决办法依然是通过设置一定的窗口大小，只不过，流量控制的窗口大小是 B 直接告诉 A 的，而拥塞控制的窗口大小按理说就应该是网络环境主动告诉 A。</p><p>但网络环境怎么可能主动告诉 A 呢？只能 A 单方面通过 <strong>试探</strong>，不断感知网络环境的好坏，进而确定自己的拥塞窗口的大小。</p><p><img src="'+k+'" alt=""></p><p>拥塞窗口大小的计算有很多复杂的算法，就不在本文中展开了，假如 <strong>拥塞窗口的大小为 cwnd</strong>，上一部分流量控制的 <strong>滑动窗口的大小为 rwnd</strong>，那么窗口的右边界受这两个值共同的影响，需要取它俩的最小值，即 <strong>窗口大小 = min(cwnd, rwnd)</strong></p><p>含义很容易理解，当 B 的接受能力比较差时，即使网络非常通畅，A 也需要根据 B 的接收能力限制自己的发送窗口。当网络环境比较差时，即使 B 有很强的接收能力，A 也要根据网络的拥塞情况来限制自己的发送窗口。正所谓受其 <strong>短板</strong> 的影响嘛~</p><h2 id="连接问题" tabindex="-1">连接问题 <a class="header-anchor" href="#连接问题" aria-label="Permalink to &quot;连接问题&quot;">​</a></h2><p>有的时候，B 主机的相应进程还没有准备好或是挂掉了，A 就开始发送数据包，导致了浪费。</p><p><img src="'+T+'" alt="图片"></p><p>这个问题在于，A 在跟 B 通信之前，没有事先确认 B 是否已经准备好，就开始发了一连串的信息。就好比你和另一个人打电话，你还没有&quot;喂&quot;一下确认对方有没有在听，你就巴拉巴拉说了一堆。</p><p>这个问题该怎么解决呢？</p><p>地球人都知道，<strong>三次握手</strong>嘛！</p><p>A：我准备好了(SYN)</p><p>B：我知道了(ACK)，我也准备好了(SYN)</p><p>A：我知道了(ACK)</p><p><img src="'+K+'" alt="图片"></p><p>A 与 B 各自在内存中维护着自己的状态变量，三次握手之后，双方的状态都变成了 <strong>连接已建立</strong>（ESTABLISHED）。</p><p>虽然就只是发了三次数据包，并且在各自的内存中维护了状态变量，但这么说总觉得太 low，你看这个过程相当于双方建立连接的过程，于是你灵机一动，就叫它 <strong>面向连接</strong> 吧。</p><p>注意：这个连接是虚拟的，是由 A 和 B 这两个终端共同维护的，在网络中的设备根本就不知道连接这回事儿！</p><p>但凡事有始就有终，有了建立连接的过程，就要考虑释放连接的过程，又是地球人都知道，<strong>四次挥手</strong> 嘛！</p><p>A：再见，我要关闭了(FIN)</p><p>B：我知道了(ACK)</p><p>给 B 一段时间把自己的事情处理完...</p><p>B：再见，我要关闭了(FIN)</p><p>A：我知道了(ACK)</p><p><img src="'+w+'" alt="图片"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>以上讲述的，就是 TCP 协议的核心思想，上面过程中需要传输的信息，就体现在 TCP 协议的头部，这里放上最常见的 TCP 协议头解读的图。</p><p><img src="'+x+'" alt="图片"></p><p>不知道你现在再看下面这句话，是否能理解：</p><p><strong>TCP 是</strong> <strong>面向连接的、可靠的、基于字节流的</strong> <strong>传输层通信协议</strong></p><p>面向连接、可靠，这两个词通过上面的讲述很容易理解，那什么叫做基于字节流呢？</p><p>很简单，TCP 在建立连接时，需要告诉对方 MSS（最大报文段大小）。</p><p>也就是说，如果要发送的数据很大，在 TCP 层是需要按照 MSS 来切割成一个个的 <strong>TCP 报文段</strong> 的。</p><p>切割的时候我才不管你原来的数据表示什么意思，需要在哪里断句啥的，我就把它当成一串毫无意义的字节，在我想要切割的地方咔嚓就来一刀，标上序号，只要接收方再根据这个序号拼成最终想要的完整数据就行了。</p><p>在我 TCP 传输这里，我就把它当做一个个的 <strong>字节</strong>，也就是基于字节流的含义了。</p><p><img src="'+N+'" alt="图片"></p>',110)]))}const Y=r(S,[["render",v]]);export{F as __pageData,Y as default};
