import{_ as a,o as s,c as e,a6 as n}from"./chunks/framework.BkI9ovSD.js";const t="/img/ddd-ubiquitous-language.png",l="/img/ddd-layer-architecture.png",h="/img/ddd-hexagonal-architecture.png",r="/img/ddd-onion-architecture.png",p="/img/ddd-cqrs-architecture.png",k="/img/ddd-es-architecture.png",d="/img/ddd-flower-cqrs-architecture.png",b=JSON.parse('{"title":"领域驱动设计（Domain-driven Design）","description":"","frontmatter":{"title":"领域驱动设计（Domain-driven Design）","date":"2020-09-01T00:00:00.000Z","author":"yaolinxue","categories":["DDD"],"tags":["DDD","领域驱动设计","flower","Doamin-driven Design"]},"headers":[],"relativePath":"blog/ddd/domain-driven-design.md","filePath":"blog/ddd/domain-driven-design.md","lastUpdated":1746603570000}'),o={name:"blog/ddd/domain-driven-design.md"};function E(c,i,g,y,u,m){return s(),e("div",{"data-pagefind-body":!0},i[0]||(i[0]=[n('<h2 id="领域驱动设计优势" tabindex="-1">领域驱动设计优势 <a class="header-anchor" href="#领域驱动设计优势" aria-label="Permalink to &quot;领域驱动设计优势&quot;">​</a></h2><ul><li>领域专家和开发人员共同工作，这样软件可以准确表达业务规则，就像是领域专家开发出来的一样</li><li>帮助业务人员自我提高</li><li>知识集中，确保软件知识并不只是掌握在少数人手中</li><li>领域专家、开发者和软件间不需要“翻译”，彼此使用通用语言交流</li><li>设计就是代码，代码就是设计</li><li>DDD同时提供战略设计和战术设计。战略设计帮助理解必要的投入、团队人员构成；战术设计帮助创建DDD中的各个组件。</li></ul><h2 id="通用语言-ubiquitous-language" tabindex="-1">通用语言(Ubiquitous Language) <a class="header-anchor" href="#通用语言-ubiquitous-language" aria-label="Permalink to &quot;通用语言(Ubiquitous Language)&quot;">​</a></h2><p>领域模型和软件设计是紧密联系在一起的，软件系统的各个方面的设计都要忠实的反映领域模型，以便明确二者的对应关系。而且需要经常反复检查修改模型，以便更优雅的实现模型。 那么，领域专家、设计人员和开发人员就要有一套交流的专业术语，可以称之为Ubiquitous Language</p><p><img src="'+t+'" alt="通用语言"></p><h2 id="领域驱动设计概念" tabindex="-1">领域驱动设计概念 <a class="header-anchor" href="#领域驱动设计概念" aria-label="Permalink to &quot;领域驱动设计概念&quot;">​</a></h2><ul><li>实体(Entity/Reference Object）</li><li>值对象(Value object)</li><li>聚合(Aggregate)和聚合根(Aggregate Root)</li><li>领域服务(Domain Service)</li><li>领域事件(Domain Event)</li><li>仓储(Repository)</li></ul><h3 id="实体-entity-reference-object" tabindex="-1">实体(Entity/Reference Object) <a class="header-anchor" href="#实体-entity-reference-object" aria-label="Permalink to &quot;实体(Entity/Reference Object)&quot;">​</a></h3><p>领域中具有生命周期的对象，通常会经历创建、更新和销毁的过程。它的显著特点是拥有一个全局唯一标识符，而且唯一标识符是区分两个实体是否相等的唯一条件。</p><h3 id="值对象-value-object" tabindex="-1">值对象(Value object) <a class="header-anchor" href="#值对象-value-object" aria-label="Permalink to &quot;值对象(Value object)&quot;">​</a></h3><p>领域中当只关心领域模型的属性时，应把它归类为值对象。 而且值对象应该是不可变的，和实体对比来看，值对象不需要分配唯一标识符。两个对象只要内部属性都相等，就可以认为是同一个对象。</p><h3 id="聚合聚合根-aggregate-和聚合根-aggregate-root" tabindex="-1">聚合聚合根(Aggregate)和聚合根(Aggregate Root) <a class="header-anchor" href="#聚合聚合根-aggregate-和聚合根-aggregate-root" aria-label="Permalink to &quot;聚合聚合根(Aggregate)和聚合根(Aggregate Root)&quot;">​</a></h3><ul><li>聚合定义了一组具有内聚关系的相关对象的集合，是一个修改数据的单元，通过聚合定义出对象间的关系和边界。</li><li>如果一个聚合只包含一个实体，那么这个实体可以认为是一个聚合根。</li></ul><h3 id="领域服务-domain-service" tabindex="-1">领域服务(Domain Service) <a class="header-anchor" href="#领域服务-domain-service" aria-label="Permalink to &quot;领域服务(Domain Service)&quot;">​</a></h3><ul><li>领域设计中，有些重要的操作不适合归类到Entity或Value Object的，可以设计到Service中，本质上是一些活动或者行为动作。</li><li>软件设计中，Service可以划分为三种类型：应用层服务、领域层服务和基础设施服务</li></ul><h3 id="领域事件-domain-event" tabindex="-1">领域事件(Domain Event) <a class="header-anchor" href="#领域事件-domain-event" aria-label="Permalink to &quot;领域事件(Domain Event)&quot;">​</a></h3><p>聚合对象接收命令(Command)请求和查询(Query)请求时，可能需要生成领域事件对象给领域对象。在CQRS模式的应用中，领域事件通常是由命令请求产生的。</p><h3 id="仓储-repository" tabindex="-1">仓储(Repository) <a class="header-anchor" href="#仓储-repository" aria-label="Permalink to &quot;仓储(Repository)&quot;">​</a></h3><p>实体对象需要存储，可以存储在内存(In Memory)或者磁盘(Database)上，在需要实体对象时再从仓储中重构出实体对象。在实践中，数据库存储是仓储的一种实现方式。</p><h2 id="领域驱动模式" tabindex="-1">领域驱动模式 <a class="header-anchor" href="#领域驱动模式" aria-label="Permalink to &quot;领域驱动模式&quot;">​</a></h2><ul><li>分层架构(Layers Architecture)</li><li>六边形理论(Hexagonal Architecture)</li><li>洋葱架构/简洁架构(Onion Architecture/The clean Architecture)</li><li>命令查询职责分离(Command-Query Responsibility Segregation)</li><li>事件溯源(Event Source)</li></ul><h3 id="分层架构-layers-architecture" tabindex="-1">分层架构(Layers Architecture) <a class="header-anchor" href="#分层架构-layers-architecture" aria-label="Permalink to &quot;分层架构(Layers Architecture)&quot;">​</a></h3><p><img src="'+l+'" alt="分层架构"></p><h3 id="六边形架构-端口适配器架构-hexagonal-architecture" tabindex="-1">六边形架构/端口适配器架构(Hexagonal Architecture) <a class="header-anchor" href="#六边形架构-端口适配器架构-hexagonal-architecture" aria-label="Permalink to &quot;六边形架构/端口适配器架构(Hexagonal Architecture)&quot;">​</a></h3><p><img src="'+h+'" alt="六边形架构/端口适配器架构"></p><h3 id="洋葱架构-简洁架构-onion-architecture-the-clean-architecture" tabindex="-1">洋葱架构/简洁架构(Onion Architecture/The clean Architecture) <a class="header-anchor" href="#洋葱架构-简洁架构-onion-architecture-the-clean-architecture" aria-label="Permalink to &quot;洋葱架构/简洁架构(Onion Architecture/The clean Architecture)&quot;">​</a></h3><p><img src="'+r+'" alt="洋葱架构/简洁架构"></p><h3 id="命令查询职责分离-command-query-responsibility-segregation" tabindex="-1">命令查询职责分离(Command-Query Responsibility Segregation) <a class="header-anchor" href="#命令查询职责分离-command-query-responsibility-segregation" aria-label="Permalink to &quot;命令查询职责分离(Command-Query Responsibility Segregation)&quot;">​</a></h3><p><img src="'+p+'" alt="命令查询职责分离"></p><h3 id="事件溯源-event-source" tabindex="-1">事件溯源(Event Source) <a class="header-anchor" href="#事件溯源-event-source" aria-label="Permalink to &quot;事件溯源(Event Source)&quot;">​</a></h3><p>事件溯源是一种数据存储的模式，区别于传统仓储存储实体对象的当前状态，事件溯源则存储了影响实体对象变化的所有事件，通过事件历史回溯实体的当前状态。</p><p><img src="'+k+'" alt="事件溯源"></p><h2 id="flower-domain-driven-design" tabindex="-1">Flower Domain Driven Design <a class="header-anchor" href="#flower-domain-driven-design" aria-label="Permalink to &quot;Flower Domain Driven Design&quot;">​</a></h2><h3 id="flower-ddd的设计思路" tabindex="-1">Flower DDD的设计思路 <a class="header-anchor" href="#flower-ddd的设计思路" aria-label="Permalink to &quot;Flower DDD的设计思路&quot;">​</a></h3><ul><li>Flower基于akka，是一个反应式微服务框架，原生支持消息驱动模式。</li><li>Actor模型是消息驱动、非阻塞的，优雅解决多线程难题，提高系统吞吐量</li><li>定义CommandHandler和EventHandler，处理Command和Query</li><li>编排CommandGateway流程和QueryGateway流程，代理Command和Query的操作入口</li><li>基于Flower异步特性，异步响应</li></ul><p>Flower CQRS架构图 <img src="'+d+`" alt="命令查询职责分离"></p><h3 id="command" tabindex="-1">Command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;Command&quot;">​</a></h3><ul><li>CommandGateway</li><li>CommandHandler</li><li>EventHandler</li></ul><h4 id="commandgateway" tabindex="-1">CommandGateway <a class="header-anchor" href="#commandgateway" aria-label="Permalink to &quot;CommandGateway&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CommandGateway commandGateway;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/create&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createFoodCart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ui create food cart</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // publish an commannd : CreateOrderCommand</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commandGateway.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateOrderCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incrementAndGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foodcart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h4 id="commandhandler" tabindex="-1">CommandHandler <a class="header-anchor" href="#commandhandler" aria-label="Permalink to &quot;CommandHandler&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CommandHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CreateOrderCommand command, ServiceContext context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;创建订单命令：{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, command);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AggregateLifecycle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateOrderEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(command.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), command.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h4 id="eventhandler" tabindex="-1">EventHandler <a class="header-anchor" href="#eventhandler" aria-label="Permalink to &quot;EventHandler&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EventHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CreateOrderEvent event, ServiceContext context) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;处理订单事件：{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWeb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // dao</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="query" tabindex="-1">Query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;Query&quot;">​</a></h3><h3 id="querygateway" tabindex="-1">QueryGateway <a class="header-anchor" href="#querygateway" aria-label="Permalink to &quot;QueryGateway&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  QueryGateway queryGateway;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{orderId}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> queryFoodcart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long orderId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    queryGateway.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SelectOrderCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(orderId));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="queryhandler" tabindex="-1">QueryHandler <a class="header-anchor" href="#queryhandler" aria-label="Permalink to &quot;QueryHandler&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CommandHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SelectOrderCommand command, ServiceContext context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;选择订单命令：{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, command);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AggregateLifecycle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SelectOrderEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(command.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="eventhandler-1" tabindex="-1">EventHandler <a class="header-anchor" href="#eventhandler-1" aria-label="Permalink to &quot;EventHandler&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EventHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SelectOrderEvent event, ServiceContext context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;选择订单事件：{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="flower请求响应" tabindex="-1">Flower请求响应 <a class="header-anchor" href="#flower请求响应" aria-label="Permalink to &quot;Flower请求响应&quot;">​</a></h3><p>ServiceContext中持有请求上下文对象HttpServletRequest，通过ServiceContext可以对客户端响应数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EventHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CreateOrderEvent event, ServiceContext context) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;处理订单事件：{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWeb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // dao</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="集成spring-boot" tabindex="-1">集成spring-boot <a class="header-anchor" href="#集成spring-boot" aria-label="Permalink to &quot;集成spring-boot&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FlowerComponentScan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.ly.train.flower.ddd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableTransactionManagement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DDDApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DDDApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,56)]))}const v=a(o,[["render",E]]);export{b as __pageData,v as default};
