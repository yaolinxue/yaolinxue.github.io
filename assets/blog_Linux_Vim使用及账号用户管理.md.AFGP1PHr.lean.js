import{_ as a,o as t,c as n,a6 as e}from"./chunks/framework.BkI9ovSD.js";const p="/assets/531.DHlBHxIx.png",l="/assets/532.2o3KK-Dc.png",i="/assets/533.BmlVsoJS.png",d="/assets/534.CDan5JLr.png",o="/assets/535.BKZYvJ_U.png",y=JSON.parse('{"title":"Vim使用及账号用户管理","description":"","frontmatter":{"title":"Vim使用及账号用户管理","date":"2020-12-07T00:00:00.000Z","tags":["Linux","Vim"],"categories":["Linux"]},"headers":[],"relativePath":"blog/Linux/Vim使用及账号用户管理.md","filePath":"blog/Linux/Vim使用及账号用户管理.md","lastUpdated":1746603570000}'),r={name:"blog/Linux/Vim使用及账号用户管理.md"};function c(u,s,h,g,b,m){return t(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[e('<h1 id="vim-使用及账号用户管理" tabindex="-1">Vim 使用及账号用户管理 <a class="header-anchor" href="#vim-使用及账号用户管理" aria-label="Permalink to &quot;Vim 使用及账号用户管理&quot;">​</a></h1><h2 id="一、vim-编辑器" tabindex="-1">一、Vim 编辑器 <a class="header-anchor" href="#一、vim-编辑器" aria-label="Permalink to &quot;一、Vim 编辑器&quot;">​</a></h2><h3 id="_1、vim编辑器是什么" tabindex="-1">1、Vim编辑器是什么 <a class="header-anchor" href="#_1、vim编辑器是什么" aria-label="Permalink to &quot;1、Vim编辑器是什么&quot;">​</a></h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org" target="_blank" rel="noreferrer">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：</p><p><img src="'+p+'" alt=""></p><h3 id="_2、三种使用模式" tabindex="-1">2、三种使用模式 <a class="header-anchor" href="#_2、三种使用模式" aria-label="Permalink to &quot;2、三种使用模式&quot;">​</a></h3><p>基本上 vi/vim 共分为三种模式，分别是 <strong>命令模式（Command mode）</strong>，**输入模式（Insert mode）**和 <strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p><p><strong>命令模式：</strong></p><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p><strong>输入模式：</strong></p><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><p><strong>底线命令模式</strong></p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按 ESC 键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><img src="'+l+'" alt="img" style="zoom:67%;"><h3 id="_3、上手体验一下-在-home-目录下测试" tabindex="-1">3、上手体验一下，在 home 目录下测试 <a class="header-anchor" href="#_3、上手体验一下-在-home-目录下测试" aria-label="Permalink to &quot;3、上手体验一下，在 home 目录下测试&quot;">​</a></h3><p>如果你想要使用 vi 来建立一个名为 kuangstudy.txt 的文件时，你可以这样做：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen home]# vim kuangstudy.txt</span></span></code></pre></div><p>然后就会进入文件</p><p><img src="'+i+'" alt="img"></p><p><strong>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</strong></p><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="'+d+'" alt="img"></p><p><strong>按下 ESC 按钮回到一般模式</strong></p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><p>在一般模式中按下 <strong>:wq</strong> 储存后离开 vim！</p><p><img src="'+o+`" alt="img"></p><p>OK! 这样我们就成功创建了一个 kuangstudy.txt 的文件。</p><h3 id="_4、vim-按键说明" tabindex="-1">4、Vim 按键说明 <a class="header-anchor" href="#_4、vim-按键说明" aria-label="Permalink to &quot;4、Vim 按键说明&quot;">​</a></h3><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h4 id="第一部分-一般模式可用的光标移动、复制粘贴、搜索替换等" tabindex="-1">第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等 <a class="header-anchor" href="#第一部分-一般模式可用的光标移动、复制粘贴、搜索替换等" aria-label="Permalink to &quot;第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">移动光标的方法</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td style="text-align:left;">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td style="text-align:left;">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td style="text-align:left;">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td style="text-align:left;">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td style="text-align:left;">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td style="text-align:left;">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td style="text-align:left;">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td style="text-align:left;">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td style="text-align:left;">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td style="text-align:left;">n&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td style="text-align:left;">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td style="text-align:left;">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td style="text-align:left;">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td style="text-align:left;">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td style="text-align:left;">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td style="text-align:left;">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td style="text-align:left;">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td style="text-align:left;">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td style="text-align:left;">n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">搜索替换</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td style="text-align:left;">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td style="text-align:left;">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td style="text-align:left;">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">删除、复制与粘贴</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td style="text-align:left;">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td style="text-align:left;">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td style="text-align:left;">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td style="text-align:left;">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td style="text-align:left;">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td style="text-align:left;">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td style="text-align:left;">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td style="text-align:left;">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td style="text-align:left;">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td style="text-align:left;">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td style="text-align:left;">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td style="text-align:left;">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td style="text-align:left;">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td style="text-align:left;">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td style="text-align:left;">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td style="text-align:left;">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td style="text-align:left;">u</td><td>复原前一个动作。(常用)</td></tr><tr><td style="text-align:left;">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><h4 id="第二部分-一般模式切换到编辑模式的可用的按钮说明" tabindex="-1">第二部分：一般模式切换到编辑模式的可用的按钮说明 <a class="header-anchor" href="#第二部分-一般模式切换到编辑模式的可用的按钮说明" aria-label="Permalink to &quot;第二部分：一般模式切换到编辑模式的可用的按钮说明&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">i, I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td style="text-align:left;">a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td style="text-align:left;">o, O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td style="text-align:left;">r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td style="text-align:left;">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h4 id="第三部分-一般模式切换到指令行模式的可用的按钮说明" tabindex="-1">第三部分：一般模式切换到指令行模式的可用的按钮说明 <a class="header-anchor" href="#第三部分-一般模式切换到指令行模式的可用的按钮说明" aria-label="Permalink to &quot;第三部分：一般模式切换到指令行模式的可用的按钮说明&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td style="text-align:left;">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td style="text-align:left;">:q</td><td>离开 vi (常用)</td></tr><tr><td style="text-align:left;">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td style="text-align:left;">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td style="text-align:left;">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td style="text-align:left;">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td style="text-align:left;">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td style="text-align:left;">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td style="text-align:left;">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td style="text-align:left;">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td style="text-align:left;">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td style="text-align:left;">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="二、账号管理" tabindex="-1">二、账号管理 <a class="header-anchor" href="#二、账号管理" aria-label="Permalink to &quot;二、账号管理&quot;">​</a></h2><h3 id="_1、简介" tabindex="-1">1、简介 <a class="header-anchor" href="#_1、简介" aria-label="Permalink to &quot;1、简介&quot;">​</a></h3><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><h3 id="_2、用户账号的管理" tabindex="-1">2、用户账号的管理 <a class="header-anchor" href="#_2、用户账号的管理" aria-label="Permalink to &quot;2、用户账号的管理&quot;">​</a></h3><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p><h3 id="_3、添加账号-useradd" tabindex="-1">3、添加账号 useradd <a class="header-anchor" href="#_3、添加账号-useradd" aria-label="Permalink to &quot;3、添加账号 useradd&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>useradd 选项 用户名</span></span></code></pre></div><p>参数说明：</p><ul><li><p>选项 :</p><ul><li><p>-c comment 指定一段注释性描述。</p></li><li><p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p></li><li><p>-g 用户组 指定用户所属的用户组。</p></li><li><p>-G 用户组，用户组 指定用户所属的附加组。</p></li><li><p>-m　使用者目录如不存在则自动建立。</p></li><li><p>-s Shell文件 指定用户的登录Shell。</p></li><li><p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p></li></ul></li><li><p>用户名 :</p><ul><li>指定新账号的登录名。</li></ul></li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 此命令创建了一个用户kuangshen，其中-m选项用来为登录名kuangshen产生一个主目录 /home/kuangshen</span></span>
<span class="line"><span>[root@kuangshen home]# useradd -m kuangshen</span></span></code></pre></div><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p><h3 id="_4、linux下如何切换用户" tabindex="-1">4、Linux下如何切换用户 <a class="header-anchor" href="#_4、linux下如何切换用户" aria-label="Permalink to &quot;4、Linux下如何切换用户&quot;">​</a></h3><ol><li><p>切换用户的命令为：su username 【username是你的用户名哦】</p></li><li><p>从普通用户切换到root用户，还可以使用命令：sudo su</p></li><li><p>在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p></li><li><p>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p></li></ol><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><h3 id="_5、删除帐号" tabindex="-1">5、删除帐号 <a class="header-anchor" href="#_5、删除帐号" aria-label="Permalink to &quot;5、删除帐号&quot;">​</a></h3><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>userdel 选项 用户名</span></span></code></pre></div><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen home]# userdel -r kuangshen</span></span></code></pre></div><p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><h3 id="_6、修改帐号" tabindex="-1">6、修改帐号 <a class="header-anchor" href="#_6、修改帐号" aria-label="Permalink to &quot;6、修改帐号&quot;">​</a></h3><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>usermod 选项 用户名</span></span></code></pre></div><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># usermod -s /bin/ksh -d /home/z –g developer kuangshen</span></span></code></pre></div><p>此命令将用户kuangshen的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p><h3 id="_7、用户口令的管理" tabindex="-1">7、用户口令的管理 <a class="header-anchor" href="#_7、用户口令的管理" aria-label="Permalink to &quot;7、用户口令的管理&quot;">​</a></h3><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>passwd 选项 用户名</span></span></code></pre></div><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是kuangshen，则下面的命令修改该用户自己的口令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ passwd</span></span>
<span class="line"><span>Old password:******</span></span>
<span class="line"><span>New password:*******</span></span>
<span class="line"><span>Re-enter new password:*******</span></span></code></pre></div><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># passwd kuangshen</span></span>
<span class="line"><span>New password:*******</span></span>
<span class="line"><span>Re-enter new password:*******</span></span></code></pre></div><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p><p>为用户指定空口令时，执行下列形式的命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># passwd -d kuangshen</span></span></code></pre></div><p>此命令将用户 kuangshen的口令删除，这样用户 kuangshen下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># passwd -l kuangshen</span></span></code></pre></div><h2 id="三、用户组管理" tabindex="-1">三、用户组管理 <a class="header-anchor" href="#三、用户组管理" aria-label="Permalink to &quot;三、用户组管理&quot;">​</a></h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><h3 id="_1、增加一个新的用户组使用groupadd命令" tabindex="-1">1、增加一个新的用户组使用groupadd命令 <a class="header-anchor" href="#_1、增加一个新的用户组使用groupadd命令" aria-label="Permalink to &quot;1、增加一个新的用户组使用groupadd命令&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>groupadd 选项 用户组</span></span></code></pre></div><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><p>实例1：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># groupadd group1</span></span></code></pre></div><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><p>实例2：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># groupadd -g 101 group2</span></span></code></pre></div><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h3 id="_2、如果要删除一个已有的用户组-使用groupdel命令" tabindex="-1">2、如果要删除一个已有的用户组，使用groupdel命令 <a class="header-anchor" href="#_2、如果要删除一个已有的用户组-使用groupdel命令" aria-label="Permalink to &quot;2、如果要删除一个已有的用户组，使用groupdel命令&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>groupdel 用户组</span></span></code></pre></div><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># groupdel group1</span></span></code></pre></div><p>此命令从系统中删除组group1。</p><h3 id="_3、修改用户组的属性使用groupmod命令" tabindex="-1">3、修改用户组的属性使用groupmod命令 <a class="header-anchor" href="#_3、修改用户组的属性使用groupmod命令" aria-label="Permalink to &quot;3、修改用户组的属性使用groupmod命令&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>groupmod 选项 用户组</span></span></code></pre></div><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 此命令将组group2的组标识号修改为102。</span></span>
<span class="line"><span>groupmod -g 102 group2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将组group2的标识号改为10000，组名修改为group3。</span></span>
<span class="line"><span>groupmod –g 10000 -n group3 group2</span></span></code></pre></div><h3 id="_4、切换组" tabindex="-1">4、切换组 <a class="header-anchor" href="#_4、切换组" aria-label="Permalink to &quot;4、切换组&quot;">​</a></h3><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ newgrp root</span></span></code></pre></div><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p><h3 id="_5、-etc-passwd" tabindex="-1">5、/etc/passwd <a class="header-anchor" href="#_5、-etc-passwd" aria-label="Permalink to &quot;5、/etc/passwd&quot;">​</a></h3><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>＃ cat /etc/passwd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>root:x:0:0:Superuser:/:</span></span>
<span class="line"><span>daemon:x:1:1:System daemons:/etc:</span></span>
<span class="line"><span>bin:x:2:2:Owner of system commands:/bin:</span></span>
<span class="line"><span>sys:x:3:3:Owner of system files:/usr/sys:</span></span>
<span class="line"><span>adm:x:4:4:System accounting:/usr/adm:</span></span>
<span class="line"><span>uucp:x:5:5:UUCP administrator:/usr/lib/uucp:</span></span>
<span class="line"><span>auth:x:7:21:Authentication administrator:/tcb/files/auth:</span></span>
<span class="line"><span>cron:x:9:16:Cron daemon:/usr/spool/cron:</span></span>
<span class="line"><span>listen:x:37:4:Network daemon:/usr/net/nls:</span></span>
<span class="line"><span>lp:x:71:18:Printer administrator:/usr/spool/lp:</span></span></code></pre></div><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span></span></code></pre></div><p>1）&quot;用户名&quot;是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(😃，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着/etc/group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>伪 用 户 含 义</span></span>
<span class="line"><span>bin 拥有可执行的用户命令文件</span></span>
<span class="line"><span>sys 拥有系统文件</span></span>
<span class="line"><span>adm 拥有帐户文件</span></span>
<span class="line"><span>uucp UUCP使用</span></span>
<span class="line"><span>lp lp或lpd子系统使用</span></span>
<span class="line"><span>nobody NFS使用</span></span></code></pre></div><h3 id="_6、-etc-shadow" tabindex="-1">6、/etc/shadow <a class="header-anchor" href="#_6、-etc-shadow" aria-label="Permalink to &quot;6、/etc/shadow&quot;">​</a></h3><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p><p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用&quot;:&quot;隔开。这些字段是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span></span></code></pre></div><ol><li>&quot;登录名&quot;是与/etc/passwd文件中的登录名相一致的用户账号</li><li>&quot;口令&quot;字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>&quot;最后一次修改时间&quot;表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>&quot;最小时间间隔&quot;指的是两次修改口令之间所需的最小天数。</li><li>&quot;最大时间间隔&quot;指的是口令保持有效的最大天数。</li><li>&quot;警告时间&quot;字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>&quot;不活动时间&quot;表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>&quot;失效时间&quot;字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><h3 id="_7、-etc-group" tabindex="-1">7、/etc/group <a class="header-anchor" href="#_7、-etc-group" aria-label="Permalink to &quot;7、/etc/group&quot;">​</a></h3><p>用户组的所有信息都存放在/etc/group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>组名:口令:组标识号:组内用户列表</span></span></code></pre></div><ol><li>&quot;组名&quot;是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li><li>&quot;口令&quot;字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>&quot;组标识号&quot;与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>&quot;组内用户列表&quot;是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><h2 id="四、磁盘管理" tabindex="-1">四、磁盘管理 <a class="header-anchor" href="#四、磁盘管理" aria-label="Permalink to &quot;四、磁盘管理&quot;">​</a></h2><h3 id="_1、概述" tabindex="-1">1、概述 <a class="header-anchor" href="#_1、概述" aria-label="Permalink to &quot;1、概述&quot;">​</a></h3><p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux 磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><h3 id="_2、df" tabindex="-1">2、df <a class="header-anchor" href="#_2、df" aria-label="Permalink to &quot;2、df&quot;">​</a></h3><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>df [-ahikHTm] [目录或文件名]</span></span></code></pre></div><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 将系统内所有的文件系统列出来！</span></span>
<span class="line"><span># 在 Linux 底下如果 df 没有加任何选项</span></span>
<span class="line"><span># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</span></span>
<span class="line"><span>[root@kuangshen /]# df</span></span>
<span class="line"><span>Filesystem     1K-blocks   Used Available Use% Mounted on</span></span>
<span class="line"><span>devtmpfs          889100       0    889100   0% /dev</span></span>
<span class="line"><span>tmpfs             899460     704    898756   1% /dev/shm</span></span>
<span class="line"><span>tmpfs             899460     496    898964   1% /run</span></span>
<span class="line"><span>tmpfs             899460       0    899460   0% /sys/fs/cgroup</span></span>
<span class="line"><span>/dev/vda1       41152812 6586736  32662368  17% /</span></span>
<span class="line"><span>tmpfs             179896       0    179896   0% /run/user/0</span></span>
<span class="line"><span># 将容量结果以易读的容量格式显示出来</span></span>
<span class="line"><span>[root@kuangshen /]# df -h</span></span>
<span class="line"><span>Filesystem     Size Used Avail Use% Mounted on</span></span>
<span class="line"><span>devtmpfs       869M     0 869M   0% /dev</span></span>
<span class="line"><span>tmpfs           879M 708K 878M   1% /dev/shm</span></span>
<span class="line"><span>tmpfs           879M 496K 878M   1% /run</span></span>
<span class="line"><span>tmpfs           879M     0 879M   0% /sys/fs/cgroup</span></span>
<span class="line"><span>/dev/vda1       40G  6.3G   32G  17% /</span></span>
<span class="line"><span>tmpfs           176M     0 176M   0% /run/user/0</span></span>
<span class="line"><span># 将系统内的所有特殊文件格式及名称都列出来</span></span>
<span class="line"><span>[root@kuangshen /]# df -aT</span></span>
<span class="line"><span>Filesystem     Type       1K-blocks   Used Available Use% Mounted on</span></span>
<span class="line"><span>sysfs         sysfs               0       0         0    - /sys</span></span>
<span class="line"><span>proc           proc                0       0         0    - /proc</span></span>
<span class="line"><span>devtmpfs       devtmpfs       889100       0    889100   0% /dev</span></span>
<span class="line"><span>securityfs     securityfs          0       0         0    - /sys/kernel/security</span></span>
<span class="line"><span>tmpfs         tmpfs          899460     708    898752   1% /dev/shm</span></span>
<span class="line"><span>devpts         devpts              0       0         0    - /dev/pts</span></span>
<span class="line"><span>tmpfs         tmpfs          899460     496    898964   1% /run</span></span>
<span class="line"><span>tmpfs         tmpfs          899460       0    899460   0% /sys/fs/cgroup</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemd</span></span>
<span class="line"><span>pstore         pstore              0       0         0    - /sys/fs/pstore</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezer</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpuset</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlb</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkio</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_prio</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/memory</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/pids</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacct</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/devices</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_event</span></span>
<span class="line"><span>configfs       configfs            0       0         0    - /sys/kernel/config</span></span>
<span class="line"><span>/dev/vda1     ext4         41152812 6586748  32662356  17% /</span></span>
<span class="line"><span>systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_misc</span></span>
<span class="line"><span>mqueue         mqueue              0       0         0    - /dev/mqueue</span></span>
<span class="line"><span>debugfs       debugfs             0       0         0    - /sys/kernel/debug</span></span>
<span class="line"><span>hugetlbfs     hugetlbfs           0       0         0    - /dev/hugepages</span></span>
<span class="line"><span>tmpfs         tmpfs          179896       0    179896   0% /run/user/0</span></span>
<span class="line"><span>binfmt_misc   binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc</span></span>
<span class="line"><span># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@kuangshen /]# df -h /etc</span></span>
<span class="line"><span>Filesystem     Size Used Avail Use% Mounted on</span></span>
<span class="line"><span>/dev/vda1       40G  6.3G   32G  17% /</span></span></code></pre></div><h3 id="_3、du" tabindex="-1">3、du <a class="header-anchor" href="#_3、du" aria-label="Permalink to &quot;3、du&quot;">​</a></h3><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>du [-ahskm] 文件或目录名称</span></span></code></pre></div><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span></span>
<span class="line"><span># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span></span>
<span class="line"><span>[root@kuangshen home]# du</span></span>
<span class="line"><span>16./redis</span></span>
<span class="line"><span>8./www/.oracle_jre_usage  # 包括隐藏文件的目录</span></span>
<span class="line"><span>24./www</span></span>
<span class="line"><span>48.                        # 这个目录(.)所占用的总量</span></span>
<span class="line"><span># 将文件的容量也列出来</span></span>
<span class="line"><span>[root@kuangshen home]# du -a</span></span>
<span class="line"><span>4./redis/.bash_profile</span></span>
<span class="line"><span>4./redis/.bash_logout    </span></span>
<span class="line"><span>....中间省略....</span></span>
<span class="line"><span>4./kuangstudy.txt # 有文件的列表了</span></span>
<span class="line"><span>48.</span></span>
<span class="line"><span># 检查根目录底下每个目录所占用的容量</span></span>
<span class="line"><span>[root@kuangshen home]# du -sm /*</span></span>
<span class="line"><span>0/bin</span></span>
<span class="line"><span>146/boot</span></span>
<span class="line"><span>.....中间省略....</span></span>
<span class="line"><span>0/proc</span></span>
<span class="line"><span>.....中间省略....</span></span>
<span class="line"><span>1/tmp</span></span>
<span class="line"><span>3026/usr  # 系统初期最大就是他了啦！</span></span>
<span class="line"><span>513/var</span></span>
<span class="line"><span>2666/www</span></span></code></pre></div><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><h3 id="_4、磁盘挂载与卸除" tabindex="-1">4、磁盘挂载与卸除 <a class="header-anchor" href="#_4、磁盘挂载与卸除" aria-label="Permalink to &quot;4、磁盘挂载与卸除&quot;">​</a></h3><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span></span></code></pre></div><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span></span>
<span class="line"><span>[root@www ~]# mkdir /mnt/hdc6</span></span>
<span class="line"><span>[root@www ~]# mount /dev/hdc6 /mnt/hdc6</span></span>
<span class="line"><span>[root@www ~]# df</span></span>
<span class="line"><span>Filesystem           1K-blocks     Used Available Use% Mounted on</span></span>
<span class="line"><span>/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span></span></code></pre></div><p>磁盘卸载命令 umount 语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>umount [-fn] 装置文件名或挂载点</span></span></code></pre></div><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[root@www ~]# umount /dev/hdc6</span></span></code></pre></div>`,226)]))}const f=a(r,[["render",c]]);export{y as __pageData,f as default};
