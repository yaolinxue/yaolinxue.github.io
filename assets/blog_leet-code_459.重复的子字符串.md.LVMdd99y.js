import{_ as i,o as a,c as n,a6 as p}from"./chunks/framework.BkI9ovSD.js";const t="/assets/repeated-string-pattern-double-str-1.Dnr2hD-d.jpeg",l="/assets/repeated-string-pattern-double-str-2.B4DNSfa1.jpeg",e="/assets/repeated-string-pattern-double-str-4.BhkWZQjg.jpeg",h="/assets/repeated-string-pattern-double-str-5.DUZrQgH7.jpeg",k="/assets/repeated-string-pattern-double-str-6.BRm5oXKt.jpeg",d="/assets/repeated-string-pattern-kmp-0-0.DEOaArL3.jpeg",r="/assets/repeated-string-pattern-kmp-4.B5EE8IwY.jpeg",E="/assets/repeated-string-pattern-kmp-1.CwAnJxk2.jpeg",c="/assets/repeated-string-pattern-kmp-2.IrC0eiux.jpeg",o="/assets/repeated-string-pattern-kmp-3.DRI5EdHj.jpeg",g="/assets/repeated-string-pattern-kmp-5-1.BlbWArgv.jpeg",y="/assets/repeated-string-pattern-kmp-5-2.BneqxAX_.jpeg",F="/assets/repeated-string-pattern-kmp-5-3.DzFGxZ6W.jpeg",m="/assets/repeated-string-pattern-kmp-5-4.CdiZCc75.jpeg",A="/assets/repeated-string-pattern-kmp-5-5.BzMGMkzK.jpeg",D="/assets/repeated-string-pattern-kmp-5-6.N0XiKvx2.jpeg",u="/assets/repeated-string-pattern-kmp-6-1.CGVY8rD0.jpeg",b="/assets/repeated-string-pattern-kmp-6-2.CyvnFY-L.jpeg",C="/assets/repeated-string-pattern-kmp-7-1.9nCp1V1T.jpeg",q="/assets/repeated-string-pattern-kmp-7-2.C8bYcwRS.jpeg",_="/assets/repeated-string-pattern-kmp-7-3.g6N-I-6X.jpeg",B="/assets/repeated-string-pattern-kmp-7-4.BlGzRN9B.jpeg",K=JSON.parse('{"title":"459.重复的子字符串","description":"","frontmatter":{"title":"459.重复的子字符串","date":"2024-01-08T00:00:00.000Z","tags":["字符串","字符串匹配","KMP"],"categories":["力扣每日一题"]},"headers":[],"relativePath":"blog/leet-code/459.重复的子字符串.md","filePath":"blog/leet-code/459.重复的子字符串.md","lastUpdated":1746603753000}'),x={name:"blog/leet-code/459.重复的子字符串.md"};function f(v,s,j,z,P,S){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[p(`<h1 id="_459-重复的子字符串" tabindex="-1">459.重复的子字符串 <a class="header-anchor" href="#_459-重复的子字符串" aria-label="Permalink to &quot;459.重复的子字符串&quot;">​</a></h1><p><strong>难度：容易</strong></p><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p><p><strong>示例 1:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入: s = &quot;abab&quot;</span></span>
<span class="line"><span>输出: true</span></span>
<span class="line"><span>解释: 可由子串 &quot;ab&quot; 重复两次构成。</span></span></code></pre></div><p><strong>示例 2:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入: s = &quot;aba&quot;</span></span>
<span class="line"><span>输出: false</span></span></code></pre></div><p><strong>示例 3:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入: s = &quot;abcabcabcabc&quot;</span></span>
<span class="line"><span>输出: true</span></span>
<span class="line"><span>解释: 可由子串 &quot;abc&quot; 重复四次构成。 (或子串 &quot;abcabc&quot; 重复两次构成。)</span></span></code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 由小写英文字母组成</li></ul><h2 id="解题思路-暴力枚举" tabindex="-1">解题思路（暴力枚举） <a class="header-anchor" href="#解题思路-暴力枚举" aria-label="Permalink to &quot;解题思路（暴力枚举）&quot;">​</a></h2><ol start="4"><li>通过外层循环遍历所有可能的子串长度，但只考虑那些能被整个字符串长度整除的子串长度。</li><li>对于每一个这样的子串长度，函数检查整个字符串是否可以被这个子串完整地、重复地覆盖。</li><li>这种检查是通过内层循环实现的，该循环遍历字符串的每个字符，并将其与假定的重复子串中的对应字符进行比较。</li><li>如果在任何时候字符不匹配，内层循环会提前终止，并且外层循环继续尝试下一个子串长度。</li><li>如果找到了完全匹配的子串，则函数返回 <code>true</code>，否则，遍历完所有可能的子串长度后返回 <code>false</code>。</li></ol><h2 id="代码展示" tabindex="-1">代码展示 <a class="header-anchor" href="#代码展示" aria-label="Permalink to &quot;代码展示&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> repeatedSubstringPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取字符串的长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 外层循环：尝试每一个可能的子串长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果i是字符串长度的因子，则进行检查</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 内层循环：遍历字符串，从第i个字符开始</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 将每个字符与它应该匹配的字符（即它在重复子串中的对应字符）进行比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 一旦发现不匹配，立即跳出循环</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果整个字符串匹配了重复的子串模式，则返回true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果没有找到任何重复的子串模式，则返回false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间复杂度: O(n^2)</p><p>空间复杂度: O(1)</p><h2 id="双倍字符串法" tabindex="-1">双倍字符串法 <a class="header-anchor" href="#双倍字符串法" aria-label="Permalink to &quot;双倍字符串法&quot;">​</a></h2><p><strong>算法原理：把字符串翻倍，掐头去尾，如果原字符串在其中，那么原字符串就是周期串 。</strong></p><h3 id="证明匹配意味着周期性" tabindex="-1">证明匹配意味着周期性 <a class="header-anchor" href="#证明匹配意味着周期性" aria-label="Permalink to &quot;证明匹配意味着周期性&quot;">​</a></h3><p>假设我们有字符串 <code>s</code> ，把它的头尾字符分别染上黄色和蓝色：</p><p><img src="`+t+'" alt="img"></p><p>把字符串 <code>s</code> 接到自身后面，然后掐头去尾，形成新字符串 <code>s&#39;</code>：</p><img src="'+l+'" alt="img" style="zoom:50%;"><p><strong>如果原字符串 <code>s</code> 在新字符串 <code>s&#39;</code> 中真的存在，能说明 <code>s</code> 是一个周期串吗</strong>？答案是能。</p><p>不妨设右边匹配的少一些。对其中的任一字符 <code>A</code> ，可以按照如下的规则推演：</p><p><img src="'+e+'" alt="img"></p><p>推演说明：</p><ul><li>由于上下字符串匹配，所以有 ① 号推演。</li><li>由于和左上方的自身相等，所以有 ② 号推演。</li><li>如此反复。</li></ul><p>如此，任一此区间上的字符 <code>A</code> 会在 <code>s</code> 中周期性出现，即说明字符串 <code>s</code> 是周期串。</p><h3 id="证明周期性意味着匹配" tabindex="-1">证明周期性意味着匹配 <a class="header-anchor" href="#证明周期性意味着匹配" aria-label="Permalink to &quot;证明周期性意味着匹配&quot;">​</a></h3><p>**反过来，如果一个字符串 <code>s</code> 是周期串，那么它一定在对应的 <code>s&#39;</code> 中吗？**答案也是肯定的，证明过程：</p><p>任何一个周期串可以表达为： 由某个模式子串的重复多次构成。</p><img src="'+h+'" alt="img" style="zoom:50%;"><p>将周期串 <code>s</code> 的头字符对齐在第一个模式串后面， 每次右移一个模式串的长度。</p><p>可知，<code>s</code> 会在 <code>s&#39;</code> 中有匹配，且可以有多个匹配。</p><p><img src="'+k+`" alt="img"></p><p>图中可看出， 因为模式串重复 <code>n</code> 次，所以会有 <code>n</code> 次匹配 。</p><p>构造双倍串 <code>s&#39;</code> 时，移除头尾字符， 正是 <strong>为了剔除最左和最右的两次必然匹配</strong>，确保只有中间的 <code>n</code> 次匹配才用到了周期串重复模式串的性质。</p><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p>综上两方面说明了充分性和必要性，结论：<strong>如果字符串在其掐头去尾的双倍字符串中，它就是周期串</strong>。</p><h3 id="代码展示-1" tabindex="-1">代码展示 <a class="header-anchor" href="#代码展示-1" aria-label="Permalink to &quot;代码展示&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> repeatedSubstringPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>本方法的实现，依赖语言自建的字符串搜索方法，故不做复杂度分析。</p><h2 id="kmp-法" tabindex="-1">KMP 法 <a class="header-anchor" href="#kmp-法" aria-label="Permalink to &quot;KMP 法&quot;">​</a></h2><p>假设要判断的字符串为 <code>s</code> ，将其尾部字符标记为蓝色，取字符串 <code>q</code> 为不包含 <code>s</code> 尾部字符的部分，取 <code>c</code> 为 <code>q</code> 的 <strong>最长相等前后缀</strong>。</p><img src="`+d+'" alt="img" style="zoom:50%;"><p>相等前后缀的意思是，它是既出现在字符串最前面、也出现在字符串最后面的真子串，比如如果 <code>s</code> 是字符串串 <code>&quot;abcabcabc&quot;</code> ，则 <code>q</code> 是 <code>&quot;abcabcab&quot;</code> ，<code>q</code> 的最长相等前后缀 <code>c</code> 是 <code>&quot;abcab&quot;</code> ：</p><img src="'+r+'" alt="img" style="zoom:50%;"><p>使用 kmp 法求解此题的原理是：<strong><code>s</code> 是周期串等价于 <code>len(s)</code> 是 <code>len(q) - len(c)</code> 的倍数</strong></p><h3 id="证明-s-是周期串意味着-len-s-是-len-q-len-c-的倍数" tabindex="-1">证明 s 是周期串意味着 len(s) 是 len(q) - len(c) 的倍数 <a class="header-anchor" href="#证明-s-是周期串意味着-len-s-是-len-q-len-c-的倍数" aria-label="Permalink to &quot;证明 s 是周期串意味着 len(s) 是 len(q) - len(c) 的倍数&quot;">​</a></h3><p>假设字符串 <code>s</code> 是一个周期串，它由模式串 <code>p</code> 重复多次构成：</p><img src="'+E+'" alt="img" style="zoom:50%;"><p>取字符串 <code>q</code> 为不包含 <code>s</code> 尾部字符的部分， 取 <code>c_1</code> 为 <code>q</code> 中剔去开头第一个模式串 <code>p</code> 后的部分：</p><img src="'+c+'" alt="img" style="zoom:50%;"><p>显然，字符串 <code>c_1</code> 是 <code>q</code> 的一个 <strong>相等前后缀</strong>，比如周期串 <code>&quot;abcabcabc&quot;</code> ，对应的 <code>c_1</code> 则是 <code>&quot;abcab&quot;</code> ：</p><img src="'+o+'" alt="img" style="zoom:67%;"><p>实际上，<code>c_1</code> 就是 <code>q</code> 最长的前后公共缀 <code>c</code>，由此可知周期长度是 <code>len(p) = len(q)-len(c)</code> 。</p><p>证明了：若字符串 <code>s</code> 是周期串，所以其长度一定是周期长度的倍数。</p><h3 id="c-1-就是-q-最长的前后公共缀-c-的证明" tabindex="-1">c_1 就是 q 最长的前后公共缀 c 的证明 <a class="header-anchor" href="#c-1-就是-q-最长的前后公共缀-c-的证明" aria-label="Permalink to &quot;c_1 就是 q 最长的前后公共缀 c 的证明&quot;">​</a></h3><p>我们采用反证法，假设存在一个字符串 <code>c&#39;</code> 也是 <code>q</code> 的前后公共缀，而且它比 <code>c_1</code> 长一位，另外，假设尾部字符为 <code>A</code> 。</p><img src="'+g+'" alt="img" style="zoom:80%;"><p>现在有两条性质：</p><ul><li>周期性质：字符串 <code>s</code> 的周期性。</li><li>相等前后缀性质：<code>c&#39;</code> 是 <code>q</code> 的相等前后缀。</li></ul><p>我们反复利用这两条性质：</p><ol><li><p>由于「相等前后缀性质」，<code>q</code> 的第一个字符也是 <code>A</code>。</p><img src="'+y+'" alt="img" style="zoom:67%;"></li><li><p>由于「周期性质」，后续的循环子串中的第一个字符也是 <code>A</code> 。</p><img src="'+F+'" alt="img" style="zoom:67%;"></li><li><p>由于「前后公共缀性质」，<code>q</code> 的第二个字符也是 <code>A</code>。</p><img src="'+m+'" alt="img" style="zoom:67%;"></li><li><p>由于「周期性质」，后续的循环子串中的第二个字符也是 <code>A</code> 。</p><img src="'+A+'" alt="img" style="zoom:67%;"></li><li><p>如上反复进行，最终，推断整个 <code>q</code> 以及 <code>s</code> 都由字符 <code>A</code> 构成。</p><img src="'+D+'" alt="img" style="zoom:50%;"></li></ol><p>此时的模式串 <code>p</code> 即单个字符 <code>A</code> ，<code>c_1</code> 如上图，长度是 <code>len(q)-1</code> 。</p><p>相等前后缀是真子串，显然，不会存在比它更长的前后公共缀，造成矛盾。因此，所定义的 <code>c_1</code> 就是 <code>q</code> 的最长前后公共缀 <code>c</code> 。</p><h3 id="证明-len-s-是-len-q-len-c-的倍数意味着-s-是周期串" tabindex="-1">证明 len(s) 是 len(q) - len(c) 的倍数意味着 s 是周期串 <a class="header-anchor" href="#证明-len-s-是-len-q-len-c-的倍数意味着-s-是周期串" aria-label="Permalink to &quot;证明 len(s) 是 len(q) - len(c) 的倍数意味着 s 是周期串&quot;">​</a></h3><p>令 <code>d = len(q)-len(c)</code> ， 如果字符串 <code>s</code> 的长度是 <code>d</code> 的倍数，是否 <code>s</code> 一定是周期串？</p><p>此时字符串 <code>s</code> 一定可以按照每 <code>d</code> 个字符一份，切分为整数个小串：</p><img src="'+u+'" alt="img" style="zoom:50%;"><p>同样假设尾巴字符是蓝色的 <code>A</code> ， 剔除尾巴字符后 <code>q</code> 和 其最长前后公共缀 <code>c</code> 如下所示：</p><img src="'+b+'" alt="img" style="zoom:50%;"><p>根据 <code>d = len(q) - len(c)</code> ， 我们知道 <code>len(c) + 1 = len(q) - d + 1</code> 。</p><p>又因 <code>len(q) = len(s) - 1</code> ，且 <code>len(s)</code> 可以写作 <code>len(s) = k * d</code> 。</p><p>所以 <code>len(c) + 1 = k * d - d = (k - 1) * d</code> ，说明 <code>len(c) + 1</code> 是 <code>d</code> 的倍数。</p><p>因此，在下图中， <code>c</code> 必然上下对齐于某个小串的开头。</p><p>又因 <code>len(c) + 1 = (k - 1) * d</code> ，所以 <code>c</code> 就是 <code>q</code> 中剔除第一个小份串 <code>p1</code> 的部分。</p><img src="'+C+'" alt="img" style="zoom:50%;"><p>下面将说明，<code>s</code> 是一个周期串。</p><p>在最后一个小份串，从尾部取倒数第 <code>j</code> 个字符 <code>B</code> ，反复推演， 可以知道前面的所有小份串的相同位置，都是字符 <code>B</code> 。</p><img src="'+q+'" alt="img" style="zoom:67%;"><p>上面的图中：</p><ol><li>① 号推演，由于上面后缀和下面前缀相等。</li><li>② 号推演，由于下面的小份串和上面的自身相等。</li><li>如此，反复进行。</li></ol><p>对最后一个小份串上的所有字符， 都会在前面的小份串相同位置重复，那么 <code>s</code> 是一个周期串。</p><p><strong>上面推演中的一个细节是，无法推演小份串的倒数第一个字符。</strong></p><img src="'+_+'" alt="img" style="zoom:50%;"><p>原因在于，尾端字符不在最长前后公共缀的范围内。</p><p>细节处理就是，需要判断一次尾巴字符 <code>A</code> 是否和上一个小串对应位置的字符相等。</p><p>一旦此细节满足，即可完成整体推演过程，<code>s</code> 就一定是一个周期串。</p><img src="'+B+`" alt="img" style="zoom:50%;"><h3 id="代码展示-2" tabindex="-1">代码展示 <a class="header-anchor" href="#代码展示-2" aria-label="Permalink to &quot;代码展示&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> repeatedSubstringPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lc) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lc) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String p) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 构建 next 数组，数组长度为匹配串的长度（next 数组是和匹配串相关的）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[lp];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    next[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        next[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //i: 当前要求解next[i]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //m: cn始终记录next[i - 1]的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] == p[i-1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                next[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] != p[i-1]但前后缀还有匹配的可能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[m];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] != p[i-1]且前后缀没有匹配的可能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                next[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p>打基础的时候，不要太迷恋于库函数。</p></li><li><p>如果库函数仅仅是 解题过程中的一小部分，并且你已经很清楚这个库函数的内部实现原理的话，可以考虑使用库函数。</p></li><li><p>双指针法在数组，链表和字符串中很常用。</p></li><li><p>当需要固定规律一段一段去处理字符串的时候，要想想在在 for 循环的表达式上做做文章。</p></li><li><p>KMP算法是字符串查找最重要的算法</p></li></ul>`,98)]))}const w=i(x,[["render",f]]);export{K as __pageData,w as default};
