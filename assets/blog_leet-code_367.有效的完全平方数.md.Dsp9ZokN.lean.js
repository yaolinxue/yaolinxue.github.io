import{_ as i,o as a,c as n,a6 as l}from"./chunks/framework.BkI9ovSD.js";const g=JSON.parse('{"title":"367.有效的完全平方数","description":"","frontmatter":{"title":"367.有效的完全平方数","date":"2023-07-02T00:00:00.000Z","tags":["数学","查找","二分查找"],"categories":["力扣每日一题"]},"headers":[],"relativePath":"blog/leet-code/367.有效的完全平方数.md","filePath":"blog/leet-code/367.有效的完全平方数.md","lastUpdated":1746603570000}'),t={name:"blog/leet-code/367.有效的完全平方数.md"};function p(h,s,e,k,d,r){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[l(`<h1 id="_367-有效的完全平方数" tabindex="-1">367.有效的完全平方数 <a class="header-anchor" href="#_367-有效的完全平方数" aria-label="Permalink to &quot;367.有效的完全平方数&quot;">​</a></h1><p><strong>难度：简单</strong></p><p>给你一个正整数 <code>num</code> 。如果 <code>num</code> 是一个完全平方数，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>完全平方数</strong> 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。</p><p>不能使用任何内置的库函数，如 <code>sqrt</code> 。</p><p><strong>示例 1：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：num = 16</span></span>
<span class="line"><span>输出：true</span></span>
<span class="line"><span>解释：返回 true ，因为 4 * 4 = 16 且 4 是一个整数。</span></span></code></pre></div><p><strong>示例 2：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：num = 14</span></span>
<span class="line"><span>输出：false</span></span>
<span class="line"><span>解释：返回 false ，因为 3.742 * 3.742 = 14 但 3.742 不是一个整数。</span></span></code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 2^(31) - 1</code></li></ul><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p>求 num 开方后是不是一个整数，显然平方根一定是 1，2，3 ... num 中的一个数。</p><p>从一个 <strong>有序的、无重复的</strong> 序列中寻找目标值，很适合使用二分查找法。</p><p>综合 69 题的经验和题干中所说明的数据范围，为了避免 <strong>数据溢出</strong> 的问题，也为了节省内存。我们这里不采用 middle * middle == num 的判断方式，而是采用 num / middle == middle 的判断方式，但要注意使用 <strong>整数除法</strong> 时会面临的 <strong>数值截断</strong> 问题：</p><p>例如 10 / 3 == 3 成立，但是 3 * 3 = 9，显然仅凭 num / middle == middle 的判断方式，在某些情况下是会得到错误结果的。</p><p><strong>那如果用 double 除法呢？</strong></p><p>其实 double 除法也会面临数据截断的问题，只是精度在一定程度上相对整数除法提高了而已。</p><p>换个思路，<strong>在整数除法中，采用 num / middle == middle &amp;&amp; middle * middle == num 的方式可以吗？</strong></p><p>看起来确实可以验证出正确的结果，但是这样会不会又出现数据溢出的问题呢，毕竟 middle * middle == num 是我们一开始就抛弃的方案。</p><p>答案是不会，因为哪怕 num = Integer.MAX_VALUE，也只有当 <strong>num * 1.0 / x = x.小数部分</strong> 的时候才会触发 <strong>&amp;&amp;</strong> 后面的部分，而在这种情况下，x * x 的结果显然是小于 num 的，也就是不会超过 int 的存储范围，也就不会导致数据溢出了。</p><p>同时要注意，当 <strong>num * 1.0 / x = x.小数部分 &amp;&amp; x * x != num</strong> 成立的时候，显然也存在 (x - 1) * (x - 1) &lt; num 和 (x + 1) * (x + 1) &gt; num，这说明 num 不是一个完全平方数。</p><h2 id="我的过程" tabindex="-1">我的过程 <a class="header-anchor" href="#我的过程" aria-label="Permalink to &quot;我的过程&quot;">​</a></h2><ol><li><p>先取中点 middle，然后判断 num / middle == middle 是否成立</p></li><li><p>num / middle == middle 的时候，判断 middle * middle == num 是否成立</p></li><li><p>若 middle * middle == num 成立，则 middle 刚好是目标值，返回 true</p></li><li><p>若 middle * middle == num 不成立，根据上面的分析，目标值不存在，返回 false</p></li><li><p>num / middle &lt; middle 的时候，则从 middle 左边继续寻找</p></li><li><p>num / middle &gt; middle 的时候，则从 middle 右边继续寻找</p></li><li><p>当 right &gt; left 的时候退出循环，此时目标值不存在，返回 false</p></li></ol><h2 id="我的代码" tabindex="-1">我的代码 <a class="header-anchor" href="#我的代码" aria-label="Permalink to &quot;我的代码&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPerfectSquare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(left, right, num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //简化逻辑的写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> middle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间复杂度：O(log n)</p><p>空间复杂度：O(1)</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>当思路想清楚的时候，代码的编写不过是几分钟的事情。</p><p>各种边缘条件、临界情况和极端数例的存在，在思考算法的时候都要考虑到。</p>`,31)]))}const o=i(t,[["render",p]]);export{g as __pageData,o as default};
