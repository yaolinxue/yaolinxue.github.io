import{_ as i,o as a,c as n,a6 as h}from"./chunks/framework.BkI9ovSD.js";const p="/assets/28-1.Bt__A4Zg.jpeg",k="/assets/28-2.CNZUXYu-.jpeg",t="/assets/28-3.Cu77NWeP.jpg",l="/assets/28-4.CBRdoyeH.jpg",e="/assets/28-5.C0aS6aJ7.jpg",d="/assets/28-6.BIrDnVwg.jpg",E="/assets/28-7.BG3XujN4.jpg",r="/assets/28-8.B7XH5PM_.jpg",c="/assets/28-9.CVxEBR-I.jpg",o="/assets/28-10.Be9z0o5k.jpg",g="/assets/28-11.CvwXiOQ6.jpg",y="/assets/28-12.D5vImeJb.jpg",F="/assets/28-13.CwE2pKcb.jpg",A="/assets/28-14.Cdf3lvCM.jpg",D="/assets/28-15.Bw4a3dlq.jpg",m="/assets/28-16.B4mv-4iB.jpg",C="/assets/28-17.qAhgvvcT.jpg",x="/assets/28-18.io6UauV2.jpg",P=JSON.parse('{"title":"28.找出字符串中第一个匹配项的下标","description":"","frontmatter":{"title":"28.找出字符串中第一个匹配项的下标","date":"2023-09-06T00:00:00.000Z","tags":["双指针","字符串","字符串匹配","KMP"],"categories":["力扣每日一题"]},"headers":[],"relativePath":"blog/leet-code/28.找出字符串中第一个匹配项的下标.md","filePath":"blog/leet-code/28.找出字符串中第一个匹配项的下标.md","lastUpdated":1746603753000}'),u={name:"blog/leet-code/28.找出字符串中第一个匹配项的下标.md"};function j(B,s,b,_,q,v){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[h(`<h1 id="_28-找出字符串中第一个匹配项的下标" tabindex="-1">28.找出字符串中第一个匹配项的下标 <a class="header-anchor" href="#_28-找出字符串中第一个匹配项的下标" aria-label="Permalink to &quot;28.找出字符串中第一个匹配项的下标&quot;">​</a></h1><p><strong>难度：容易</strong></p><p>给你两个字符串 <code>s</code> 和 <code>p</code> ，请你在 <code>s</code> 字符串中找出 <code>p</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>p</code> 不是 <code>s</code> 的一部分，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：s = &quot;sadbutsad&quot;, p = &quot;sad&quot;</span></span>
<span class="line"><span>输出：0</span></span>
<span class="line"><span>解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span></span>
<span class="line"><span>第一个匹配项的下标是 0 ，所以返回 0 。</span></span></code></pre></div><p><strong>示例 2：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：s = &quot;leet-code&quot;, p = &quot;leeto&quot;</span></span>
<span class="line"><span>输出：-1</span></span>
<span class="line"><span>解释：&quot;leeto&quot; 没有在 &quot;leet-code&quot; 中出现，所以返回 -1 。</span></span></code></pre></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, p.length &lt;= 104</code></li><li><code>s</code> 和 <code>p</code> 仅由小写英文字符组成</li></ul><h2 id="解题思路-暴力匹配" tabindex="-1">解题思路（暴力匹配） <a class="header-anchor" href="#解题思路-暴力匹配" aria-label="Permalink to &quot;解题思路（暴力匹配）&quot;">​</a></h2><p>设置两个指针 <code>i</code> 和 <code>j</code>，都初始化为 0，我们对比 <code>s</code> 在 <code>i</code> 位置，<code>p</code> 在 <code>j</code> 位置的字符。</p><p>如果 <code>s[i] == p[j]</code>，那么 <code>i</code> 和 <code>j</code> 都移到下一个位置。</p><p>否则 <code>j</code> 回退到 0，<code>i</code> 回退到 1，继续上述过程，如果在下一次比较中，还是出现了不匹配的字符，那么 <code>j</code> 回退到 0，<code>i</code> 回退到 2，继续……，周而复始。</p><p>直到某一次匹配中，如果 <code>j</code> 到达越界位置，那么 <code>s</code> 包含 <code>p</code>，否则 <code>s</code> 不包含 <code>p</code>。</p><h2 id="我的代码" tabindex="-1">我的代码 <a class="header-anchor" href="#我的代码" aria-label="Permalink to &quot;我的代码&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s, String p) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j)) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 若当前字符匹配成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前子串匹配成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当前子串匹配失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间复杂度: O(n × m)，其中 n 是字符串 <code>s</code> 的长度，m 是字符串 <code>p</code> 的长度。最坏情况下我们需要将字符串 <code>p</code> 与字符串 <code>s</code> 的所有长度为 m 的子串均匹配一次。</p><p>空间复杂度: O(1)</p><h2 id="kmp-算法" tabindex="-1">KMP 算法 <a class="header-anchor" href="#kmp-算法" aria-label="Permalink to &quot;KMP 算法&quot;">​</a></h2><p>KMP 算法是一个用来 <strong>快速在原字符串中找到匹配字符串</strong> 的算法。</p><p>此算法是由 Knuth，Morris 和 Pratt 这三位学者发明的，所以命名采用了他们名字的首字母 KMP。</p><p>上述的暴力匹配解法，最坏的情况下时间复杂度为 O(m ∗ n) ，而 KMP 算法的复杂度为 O(m + n)。</p><p>KMP 之所以能够在 O(m+n) 复杂度内完成查找，是因为其能在 <strong>非完全匹配</strong> 的情况下提取到 <strong>有效信息</strong> 进行 <strong>再次利用</strong>，以减少 <strong>重复匹配</strong> 的行为。</p><p>这么说似乎有点抽象，让我们从暴力匹配法存在的问题开始讲起。</p><h3 id="暴力匹配法的不足" tabindex="-1">暴力匹配法的不足 <a class="header-anchor" href="#暴力匹配法的不足" aria-label="Permalink to &quot;暴力匹配法的不足&quot;">​</a></h3><p>上面的暴力方法是基于这样的一个尝试的思路：</p><p>如果 <code>s</code> 中有一个子串和 <code>p</code> 是匹配的，因为任何一个子串都有一个 <strong>开头位置</strong>，那么这个和 <code>p</code> 匹配的子串当然也有一个 <strong>开头位置</strong>，又因为我们不知道哪个 <strong>开头位置</strong> 的子串和 <code>p</code> 是匹配的，因此我们尝试所有可能的开头。如果我们尝试完所有的 <strong>开头位置</strong>，都没有发现一个子串可以和 <code>p</code> 匹配，那么 <code>s</code> 中就没有一个子串和匹配，即 <code>s</code> 不包含 <code>p</code>，反之 <code>s</code> 包含 <code>p</code>。那么这个过程它为什么低效呢？我们来看一下 <code>s = &quot;aaaaaaaaab&quot;</code> 和 <code>p = &quot;aaab&quot;</code> 的匹配过程。</p><p>我们首先从开头为 0 的子串尝试，当我们发现 <code>s[3]</code> 和 <code>p[3]</code> 不匹配的时候，这说明什么？这只能说明 <code>s</code> 从 0 位置开始的子串不可能和 <code>p</code> 匹配了。</p><img src="`+p+'" alt="28-1" style="zoom:150%;"><p>于是，我们只能放弃之前已经匹配的部分，选择下一个开始的位置，继续进行匹配。</p><img src="'+k+'" alt="28-2" style="zoom:150%;"><p>当我们发现某一个开头的尝试已经宣告失败的时候，此时只能选择下一个开头，继续从头开始匹配。那么此时指向 <code>s</code> 的指针会回退，<strong>之前已经匹配的部分结果完全抛弃</strong>，从新开始，因此这个方法是低效的。</p><h3 id="改进思路" tabindex="-1">改进思路 <a class="header-anchor" href="#改进思路" aria-label="Permalink to &quot;改进思路&quot;">​</a></h3><p>如果某一次尝试失败了，那么之前已经匹配的部分（<strong>之前做过的努力</strong>）能否给我们提供一些帮助，加速我们的匹配过程，甚至能使得字符串 <code>s</code> 上的指针不回退呢？我们调整的时候，需要遵循什么原则呢？</p><p>如果要保证指针 <code>i</code> 不回退，那么此时我们需要调整指针 <code>j</code> 的位置，使得 <code>s[i]</code> 可以和 <code>p[j]</code> 继续比较。那么把指针 <code>j</code> 调整到哪就是一个值得思考的问题。</p><img src="'+t+'" alt="28-3" style="zoom:150%;"><p>我们调整指针 <code>j</code> 要保证以下几个原则：</p><ol><li>毫无疑问，指针 <code>j</code> 一定要前移</li><li>指针 <code>j</code> 调整以后，<code>s[i]</code> 和 <code>p[j]</code> 要继续比较，那么一定要保证 <code>s[i]</code> 和 <code>p[j]</code> 之前的部分（如果有的话）是匹配的，这是因为 <code>i</code> 不回退，如果之前的部分是不匹配的，那么后续的比较就是没有意义的</li><li>指针 <code>j</code> 调整以后，<strong>不能使我们漏掉可能的答案</strong></li></ol><p>为了便于说明 <code>j</code> 的调整，下面我们举一个明显的例子。请看字符串 <code>s = &quot;acacab&quot;</code>，和字符串 <code>p = &quot;acab&quot;</code> 的匹配过程。</p><img src="'+l+'" alt="28-4" style="zoom:150%;"><p>此时 <code>s[i]</code> 和 <code>p[j]</code> 不匹配了，那么我们需要调整指针 <code>j</code> ，我们可以把指针 <code>j</code> 调整到 <code>p[2]</code> 的位置吗？显然是不可以的，因为指针 <code>j</code> 到 <code>p[2]</code> 位置时，<code>s[1,2]</code> 和 <code>p[0,1]</code> 是不匹配的。</p><img src="'+e+'" alt="28-5" style="zoom:150%;"><p>那么应该如何调整指针 <code>j</code> 的位置呢？我们知道，<code>j</code> 指向 <code>p[3]</code> 时 <code>s[0,2]</code> 和 <code>p[0,2]</code> 是匹配的，匹配的这一部分 <code>aca</code> 的前缀 <code>a</code> 和后缀 <code>a</code> 是匹配的，因此我们可以把指针 <code>j</code> 调整为指向 <code>p[1]</code>：</p><img src="'+d+'" alt="28-6" style="zoom:150%;"><p>如果已经匹配的部分有多个前缀和后缀是匹配的情况，我们该怎么选择？请看 <code>s = &quot;aaaab&quot;</code> 和 <code>p = &quot;aaab&quot;</code> 的匹配过程。</p><p>此时已经匹配的部分是 <code>aaa</code>，那么这个字符串有两组前后缀匹配的情况，一种是前缀 <code>a</code> 和后缀 <code>a</code> 是匹配的：</p><img src="'+E+'" alt="28-7" style="zoom:150%;"><p>还有一种情况是前缀 <code>aa</code> 和后缀 <code>aa</code> 匹配：</p><img src="'+r+'" alt="28-8" style="zoom:150%;"><p>那么怎么选择呢？答案是：<strong>选择最长的前后缀匹配</strong>，否则可能会漏掉可能的答案。</p><p>例如，如果选择前后缀匹配长度为 1 的部分，那么指针 <code>j</code> 应该调整为 <code>p[1]</code>，此时我们得到的答案是：<code>aaaab</code> 不包含 <code>aaab</code>，因为指针 <code>i</code> 会提前到越界位置，但是 <code>aaaab</code> 不包含 <code>aaab</code> 显而易见是错误的答案。</p><img src="'+c+'" alt="28-9" style="zoom:150%;"><p>如果选择前后缀匹配长度为 2 的部分，那么指针 <code>j</code> 应该调整到 <code>p[2]</code> 的位置，这样，我们就没有漏掉这个可能的答案：</p><img src="'+o+'" alt="28-10" style="zoom:150%;"><p>**总结一下：**此时我们似乎找到了，保证 <code>s</code> 指针不回退的时候，<code>p</code> 的指针的调整方案，即当我们发现某一次匹配失败的时候，我们需要找出前面已经匹配部分的 <strong>前后缀最大匹配长度</strong>，假设为 <code>next</code>，那么我们只需要把指针 <code>j</code> 调整为指向 <code>p[next]</code>，继续进行匹配操作即可。</p><h3 id="next-数组" tabindex="-1">next 数组 <a class="header-anchor" href="#next-数组" aria-label="Permalink to &quot;next 数组&quot;">​</a></h3><p>我们在进行真正的匹配之前，我们要先计算好，模式串 <code>p</code> 每一个元素的 <code>next</code> 值（<code>next</code> 值的含义就是当前元素不匹配的时候，它前面部分字符串的前后缀最大匹配长度，这个前后缀不包含自己），看下面对模式串 <code>caccacb</code> 的 <code>next</code> 值的定义过程：</p><ul><li>0 位置前面没有字符串了，它不存在 <code>next</code> 的值的概念因此这位置的 <code>next</code> 值是人为规定的，我们设定它是 -1 ，是多少都无所谓。</li><li>1 位置前面的字符串只有一个字符 <code>c</code>，而前后缀不能包含自身，因此 1 位置的 <code>next</code> 值就是 0。</li><li>2 位置前面的字符串是 <code>ac</code>，它的前后缀里没有匹配的，因此这个位置的 <code>next</code> 值是 0。</li><li>3 位置前面的字符串是 <code>cac</code>，它的能够匹配的最长前后缀是 <code>c</code>，因此 3 位置的 <code>next</code> 值是 1。</li><li>4 位置前面的字符串是 <code>cacc</code>，它的能够匹配的最长前后缀是 <code>c</code>，因此 4 位置的 <code>next</code> 值是 1。</li><li>5 位置前面的字符串是 <code>cacca</code>，它的能够匹配的最长前后缀是 <code>ca</code>，因此 5 位置的 <code>next</code> 值是 2。</li><li>6 位置前面的字符中是 <code>caccac</code>，它的能够匹配的最长前后缀是 <code>cac</code>，因此 6 位置的 <code>next</code> 值是 3。</li></ul><img src="'+g+`" alt="28-11" style="zoom:150%;"><h3 id="使用-next-数组加速匹配过程" tabindex="-1">使用 next 数组加速匹配过程 <a class="header-anchor" href="#使用-next-数组加速匹配过程" aria-label="Permalink to &quot;使用 next 数组加速匹配过程&quot;">​</a></h3><p>如果我们在开始匹配之前，先得到了一个关于模式 <code>p</code> 的每一个位置 <code>index</code> 不匹配后，模式串的匹配指针应该调整为 <code>next[index]</code> 的 <code>next</code> 数组的话，那么我们的匹配过程可以变成这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s, String p) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取关于模式串 p 的 next 数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意边界条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 若当前字符匹配成功，但子串还未匹配完全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 若当前子串匹配成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果模式串p的第一个字符p[0]和字符串s的当前字符s[i]都不匹配，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            				// 那么说明s中从i开始不可能匹配出p来，因此换下一个开头继续尝试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果j位置不是0，说明它前面有匹配成功的部分，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // 那么此时j应该调整为next[j]的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>next</code> 数组能加速匹配过程，可以从下面两个方面来理解：</p><ul><li><p><strong>保证 <code>i</code> 指针不回退，指导 <code>j</code> 指针的调整</strong>：在我们匹配失败的时候，它可以利用我们之前已经匹配的部分字符串（以前做过的努力），在保证指针 <code>i</code> 不回退的情况下，指导此时指针 <code>j</code> 应该做怎样的调整。</p></li><li><p><strong>跳过了一些无需验证的可能性</strong>：在暴力做法中，我们尝试字符串 <code>s</code> 中每一个可能的开头位置（即验证所有的可能性），而 <code>next</code> 数组指导指针 <code>j</code> 的调整，可以跳过一些根本不可能匹配出来模式串 <code>p</code> 的位置。</p></li></ul><p>这两种理解是等价的。</p><h3 id="next-数组的正确性分析" tabindex="-1">next 数组的正确性分析 <a class="header-anchor" href="#next-数组的正确性分析" aria-label="Permalink to &quot;next 数组的正确性分析&quot;">​</a></h3><p>我们举一个例子说明 <code>next</code> 数组能够指导 <code>j</code> 指针的调整，同时保证 <code>i</code> 指针不回退，并且还能跳过那些不可能的开头位置。</p><p>如下图字符串 <code>s = &quot;caccacb&quot;</code> 和字符串 <code>p = &quot;cacb&quot;</code> 的匹配过程所示。</p><p>此时我们正在尝试在 <code>s</code> 中从 0 位置开始的字符能否匹配出字符串 <code>p</code>，此时由于 <code>s[3] != p[3]</code>，于是根据 <code>next[3] = 1</code>，于是我们调整 <code>j = 1</code>：</p><img src="`+y+'" alt="28-12" style="zoom:150%;"><p>当我们把 <code>j</code> 调整为 1 的时候，此时 <code>p[0]</code> 和 <code>s[2]</code> 对齐，我们在探索 <code>s</code> 中从 2 位置开始的字符串能否匹配出来 <code>p</code>，它直接跳过了 <code>s</code> 中 1 位置开始的字符串能否匹配出 <code>p</code> 的可能性。</p><p>为什么能跳过，因为 <code>next</code> 数组的 <strong>最长匹配前后缀长度</strong> 告诉我们 <code>s</code> 中 1 位置开始的字符串不可能匹配出来 <code>p</code>，即跳过的位置都是不可能匹配出 <code>p</code> 的位置。</p><img src="'+F+'" alt="28-13" style="zoom:150%;"><p>为了更好的理解 <code>next</code> 数组的加速原理，我们可以尝试匹配一下 <code>s</code> 中的 1 位置开始的字符串，如下图所示。此时 <code>j</code> 需要调整为 2。我们可以看到，<code>j</code> 前面的部分 <code>p[0,1]</code> 和 <code>s[1,2]</code> 已经是不匹配的了。因此我们完全不用在意 <code>j</code> 调整为 <code>next[j]</code> 的时候所跳过的位置，因为这些位置根本不会匹配出来模式串 <code>p</code>。</p><img src="'+A+'" alt="28-14" style="zoom:150%;"><h3 id="构造-next-数组" tabindex="-1">构造 next 数组 <a class="header-anchor" href="#构造-next-数组" aria-label="Permalink to &quot;构造 next 数组&quot;">​</a></h3><p>在字符串 <code>p</code> 中，假设 <code>i</code> 位置以前的 <code>next</code> 值都求解好了，现在需要求解 <code>i</code> 位置的 <code>next</code> 值，假设 <code>next[i - 1] = m</code>，也就是 <code>p[0,m-1]</code> 和 <code>p[i-m-1,i-2]</code> 相互匹配：</p><img src="'+D+'" alt="28-15" style="zoom:150%;"><p>首先提问，<code>next[i]</code> 有没有可能超过 <code>m + 1</code> 呢？答案是不可能。</p><p>假设 <code>next[i] = k</code>，且<code>k &gt; m + 1</code>，那么必然存在一个长度为 <code>k</code> 的前缀 <code>p[0…k-1]</code>，和后缀 <code>p[i-k,i-1]</code> 是匹配的，那么 <code>p[0,k-2]</code> 和 <code>p[i-k,i-2]</code> 也是匹配的，即 <code>next[i - 1]</code> 可以达到 <code>k - 1</code>。</p><p>而 <code>k - 1</code> 是大于 <code>m</code> 的，和假设 <code>next[i - 1] = m</code> 矛盾，因此 <code>next[i]</code> 不会超过 <code>m + 1</code> ，即 <code>next[i] &lt;= m + 1</code>。</p><p>得到这个前提的情况下，我们考察 <code>p[m]</code> 和 <code>p[i - 1]</code> 的关系：</p><ul><li><p><strong>第一种情况，<code>p[m] == p[i-1]</code></strong></p><img src="'+m+'" alt="28-16" style="zoom:150%;"><p>此时 <code>p[0,i-1]</code> 中可以 <strong>继承</strong> 得到一个更长的匹配前缀 <code>p[0,m]</code> 和后缀 <code>p[i-m-1,i-1]</code>，显然 <code>next[i]</code> 至少是 <code>m + 1</code> ，即 <code>next[i] &gt;= m + 1</code>。</p><p>根据上述得到的前提 <code>next[i] &lt;= m + 1</code>，可知此时 <code>next[i] = m + 1</code>。</p></li><li><p><strong>第二种情况，<code>p[m] != p[i-1]</code></strong></p><img src="'+C+'" alt="28-17" style="zoom:150%;"><p>根据上述得到的前提 <code>next[i] &lt;= m + 1</code>，此时显然 <code>next[i]</code> 也不会等于 <code>m + 1</code> 了，也就是无法 <strong>继承</strong> <code>p[0,m]</code> 中的最长相同前后缀了。</p><p>但这不代表 <code>next[i]</code> 的值就是 0 了。</p><p>而是我们需要在<code>p[0,m-1]</code> 范围内找到一个<code>p[0,n]</code>，看看能否和 <code>p[i-n-1,i-1]</code> 匹配，此时 <code>0 &lt;= n &lt;= m</code>。</p><p>我们把 <code>p[0,m]</code> 这部分当成模式串 <code>p</code>，把 <code>p[i-m-1,i-1]</code> 当成我们前面字符串模式匹配问题中的 <code>s</code> 字符串，<strong>此时不就是关于某一次匹配失败的时候，字符串 <code>s</code> 的匹配指针不回退，如何调整模式串的匹配指针的问题吗</strong>？</p><p>那么我们此时让 <code>p[i-1]</code> 和 <code>p[next(m)]</code> 比较即可，匹配失败的时候，我们把 <code>m</code> 调整成 <code>next[m]</code></p><img src="'+x+`" alt="28-18" style="zoom:150%;"></li></ul><h3 id="next-数组的代码实现" tabindex="-1">next 数组的代码实现 <a class="header-anchor" href="#next-数组的代码实现" aria-label="Permalink to &quot;next 数组的代码实现&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String p) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 构建 next 数组，数组长度为匹配串的长度（next 数组是和匹配串相关的）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[lp]; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    next[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        next[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //i: 当前要求解next[i]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //m: 始终记录next[i - 1]的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] == p[i-1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                next[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] != p[i-1]且前后缀没有匹配的可能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                next[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] != p[i-1]但前后缀还有匹配的可能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[m];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这就是整个 <code>next</code> 数组的构建过程，时间复杂度和空间复杂度均为 O(lp)。</p><h3 id="kmp-算法的完整代码" tabindex="-1">KMP 算法的完整代码 <a class="header-anchor" href="#kmp-算法的完整代码" aria-label="Permalink to &quot;KMP 算法的完整代码&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String s, String p) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取关于模式串 p 的 next 数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 若当前字符匹配成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String p) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 构建 next 数组，数组长度为匹配串的长度（next 数组是和匹配串相关的）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[lp];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    next[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        next[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //i: 当前要求解next[i]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //m: cn始终记录next[i - 1]的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lp) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] == p[i-1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                next[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] != p[i-1]且前后缀没有匹配的可能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                next[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// p[m] != p[i-1]但前后缀还有匹配的可能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next[m];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间复杂度: O(n+m)</p><p>空间复杂度: O(m)</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>KMP 算法的应用范围要比 Manacher 算法广，Manacher 算法只能应用于「回文串」问题，相对比较局限，而「子串匹配」问题还是十分常见的。</p><p>背过这样的算法的意义在于：相当于大脑里有了一个时间复杂度为 O(n) 的 api 可以使用，这个 api 传入一个原串和匹配串，返回匹配串在原串的位置。</p>`,93)]))}const z=i(u,[["render",j]]);export{P as __pageData,z as default};
